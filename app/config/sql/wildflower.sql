-- MySQL dump 10.11
--
-- Host: localhost    Database: wildflower
-- ------------------------------------------------------
-- Server version	5.0.51a-log

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Table structure for table `categories`
--

DROP TABLE IF EXISTS `categories`;
SET @saved_cs_client     = @@character_set_client;
SET character_set_client = utf8;
CREATE TABLE `categories` (
  `id` int(11) NOT NULL auto_increment,
  `parent_id` int(11) default NULL,
  `lft` int(11) default NULL,
  `rght` int(11) default NULL,
  `slug` varchar(255) collate utf8_unicode_ci NOT NULL,
  `title` varchar(255) collate utf8_unicode_ci NOT NULL,
  `description` varchar(255) collate utf8_unicode_ci default NULL,
  PRIMARY KEY  (`id`),
  UNIQUE KEY `slug` (`slug`),
  KEY `parent_id` (`parent_id`),
  KEY `tree_left` (`lft`),
  KEY `tree_right` (`rght`)
) ENGINE=MyISAM AUTO_INCREMENT=25 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;
SET character_set_client = @saved_cs_client;

--
-- Dumping data for table `categories`
--

LOCK TABLES `categories` WRITE;
/*!40000 ALTER TABLE `categories` DISABLE KEYS */;
INSERT INTO `categories` VALUES (1,NULL,1,10,'php5','PHP5',''),(2,NULL,13,14,'rails','Rails',''),(19,14,3,4,'grails','Grails','123'),(4,NULL,11,12,'no-meaning','No meaning','For posts without meaning.'),(21,NULL,15,16,'really-new-caegory-very-very-loooong','Really new caegory, very very loooong','123dasjjj'),(14,1,2,7,'personal-develompent','Personal Development',''),(23,14,5,6,'123-1','123','asdsad'),(24,1,8,9,'sadsa','sadsa','asad?');
/*!40000 ALTER TABLE `categories` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `categories_posts`
--

DROP TABLE IF EXISTS `categories_posts`;
SET @saved_cs_client     = @@character_set_client;
SET character_set_client = utf8;
CREATE TABLE `categories_posts` (
  `category_id` int(11) NOT NULL,
  `post_id` int(11) NOT NULL,
  KEY `category_id` (`category_id`,`post_id`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;
SET character_set_client = @saved_cs_client;

--
-- Dumping data for table `categories_posts`
--

LOCK TABLES `categories_posts` WRITE;
/*!40000 ALTER TABLE `categories_posts` DISABLE KEYS */;
INSERT INTO `categories_posts` VALUES (1,2),(4,1),(14,1),(19,31),(21,31);
/*!40000 ALTER TABLE `categories_posts` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `comments`
--

DROP TABLE IF EXISTS `comments`;
SET @saved_cs_client     = @@character_set_client;
SET character_set_client = utf8;
CREATE TABLE `comments` (
  `id` int(11) NOT NULL auto_increment,
  `post_id` int(11) NOT NULL,
  `name` varchar(255) collate utf8_unicode_ci NOT NULL,
  `email` char(80) collate utf8_unicode_ci NOT NULL,
  `url` char(80) collate utf8_unicode_ci default NULL,
  `content` text collate utf8_unicode_ci NOT NULL,
  `spam` tinyint(1) NOT NULL default '0',
  `created` datetime NOT NULL,
  `updated` datetime NOT NULL,
  PRIMARY KEY  (`id`),
  KEY `post_id` (`post_id`),
  KEY `spam` (`spam`)
) ENGINE=MyISAM AUTO_INCREMENT=24 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;
SET character_set_client = @saved_cs_client;

--
-- Dumping data for table `comments`
--

LOCK TABLES `comments` WRITE;
/*!40000 ALTER TABLE `comments` DISABLE KEYS */;
INSERT INTO `comments` VALUES (21,32,'klevo','klevo@klevo.sk','http://klevo.sk','aloha',0,'2008-10-25 09:37:04','2008-10-25 09:37:04'),(22,32,'klevo','klevo@klevo.sk','http://klevo.sk','aloha',0,'2008-10-25 09:37:53','2008-10-25 09:37:53'),(23,28,'Mr Pruser','pruser@klevo.sk','','To nemyslis vazne, kradnut clanky od SimpleTestu!?',0,'2008-10-25 09:48:36','2008-10-25 09:48:36');
/*!40000 ALTER TABLE `comments` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `messages`
--

DROP TABLE IF EXISTS `messages`;
SET @saved_cs_client     = @@character_set_client;
SET character_set_client = utf8;
CREATE TABLE `messages` (
  `id` int(11) NOT NULL auto_increment,
  `name` varchar(100) collate utf8_unicode_ci NOT NULL,
  `email` varchar(100) collate utf8_unicode_ci NOT NULL,
  `phone` varchar(100) collate utf8_unicode_ci NOT NULL,
  `content` text collate utf8_unicode_ci,
  `created` datetime NOT NULL,
  `updated` datetime NOT NULL,
  `subject` varchar(255) collate utf8_unicode_ci default NULL,
  PRIMARY KEY  (`id`)
) ENGINE=MyISAM AUTO_INCREMENT=4 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci COMMENT='Stores all contact form communication';
SET character_set_client = @saved_cs_client;

--
-- Dumping data for table `messages`
--

LOCK TABLES `messages` WRITE;
/*!40000 ALTER TABLE `messages` DISABLE KEYS */;
INSERT INTO `messages` VALUES (3,'pajtas','pajtas@klevo.sk','432423523','Let\'s say we have an application that writes a number of files to disk and that it is appropriate to report write errors to the user. We don\'t want to add code for this all over the different parts of our application, so this is a great case for using a new error type.','2008-09-21 10:29:02','2008-09-21 10:29:05','CakePHP error handling');
/*!40000 ALTER TABLE `messages` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `pages`
--

DROP TABLE IF EXISTS `pages`;
SET @saved_cs_client     = @@character_set_client;
SET character_set_client = utf8;
CREATE TABLE `pages` (
  `id` int(11) NOT NULL auto_increment,
  `parent_id` int(11) default NULL,
  `lft` int(11) default NULL,
  `rght` int(11) default NULL,
  `level` int(3) NOT NULL default '0' COMMENT 'Page level in the tree hierarchy',
  `slug` varchar(255) collate utf8_unicode_ci NOT NULL COMMENT 'URL friendly page name',
  `url` varchar(255) collate utf8_unicode_ci NOT NULL COMMENT 'Full URL relative to root of the application',
  `title` varchar(255) collate utf8_unicode_ci NOT NULL,
  `content` text collate utf8_unicode_ci,
  `description_meta_tag` text collate utf8_unicode_ci,
  `keywords_meta_tag` text collate utf8_unicode_ci,
  `draft` tinyint(1) NOT NULL default '0',
  `created` datetime NOT NULL,
  `updated` datetime NOT NULL,
  `sidebar_content` text collate utf8_unicode_ci,
  `user_id` int(11) default NULL,
  PRIMARY KEY  (`id`),
  UNIQUE KEY `slug` (`slug`),
  KEY `parent_id` (`parent_id`),
  KEY `lft` (`lft`),
  KEY `rght` (`rght`),
  KEY `draft` (`draft`),
  FULLTEXT KEY `content` (`content`)
) ENGINE=MyISAM AUTO_INCREMENT=172 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;
SET character_set_client = @saved_cs_client;

--
-- Dumping data for table `pages`
--

LOCK TABLES `pages` WRITE;
/*!40000 ALTER TABLE `pages` DISABLE KEYS */;
INSERT INTO `pages` VALUES (52,NULL,1,4,0,'home-features','/home-features','Home & Features','<ul id=\"home-feature-list\">\n<li id=\"feature-cake\">Content management system and application platform build on <a href=\"http://www.cakephp.org\">CakePHP</a> framework and <a href=\"http://jquery.com\">jQuery</a> Javascript library.</li>\n<li id=\"feature-standards\">Standards based.</li>\n<li id=\"feature-open-source\">Open source.</li>\n<li>User friendly.</li>\n<li>Unit test coverage.</li>\n<li>It\'s a CakePHP plugin. Use with any existing CakePHP 1.2 application.</li>\n<li><a href=\"/feature-tour\">More features</a></li>\n</ul>\n<p class=\"download\"><a href=\"http://wildflower.googlecode.com/files/wildflower10a.zip\"><strong>Download now</strong><br /> Wildflower 1.0a, released 29th February 2008</a></p>','Content management system and application platform build on CakePHP framework and jQuery Javascript library.',NULL,0,'2008-02-26 16:09:00','2008-10-26 12:11:31','',1),(53,NULL,11,16,0,'feature-tour','/feature-tour','Feature tour','<h3>Ease of use</h3>\n<p>The administration interface is optimized for the ease of use. When editing a page or a post, the integrated WYSIWYG editor automatically resizes to fit the user\'s screen height.</p>\n<h3>File manager II<br /></h3>\n<p>Upload any file type. You can categorize your uploads using tags.</p>\n<p><img src=\"/wildflower/img/thumb/All_falls_down-1440x900.jpg/120/120/1\" alt=\"\" /><img src=\"/wildflower/img/thumb/Igaer-1400x1050.jpg/120/120/1\" alt=\"\" /><img src=\"/wildflower/img/thumb/All_falls_down-1440x900.jpg/120/120/1\" alt=\"\" /><img src=\"/wildflower/img/thumb/The_night_is_coming-1400x1050.jpg/120/120/1\" alt=\"\" /></p>\n<h3>Revisions</h3>\n<p>Every change you do to a page or a post is remembered and you can go back to it. No more lost content.</p>','',NULL,0,'2008-02-26 17:44:00','2008-10-08 15:00:36','',1),(54,NULL,5,6,0,'documentation','/documentation','Documentation','<p><em>This section is slowly being filled up. Please be patient.</em></p>\n<h3>Who is it for?</h3>\n<p>Everyone who is able to deploy Wordpress should be able to get Wildflower up and running. However to fully enjoy and benefit from the features of this CMS, you should be competent in these areas (or willing to learn):</p>\n<ul>\n<li>Code separation. Understand the difference between view and bussiness logic.</li>\n<li>RESTful architecture.</li>\n<li>Unit testing.</li>\n<li>The heart of Wildflower is the CakePHP framework.</li>\n</ul>\n<p>This means this system is not so much for a typical PHP hacker, but for an agile programmer that is willing to learn and adopt the best practices. We also want to have fun along the way, so the idea of the system is not to stand in your way.</p>\n<h3>Requirements</h3>\n<ul>\n<li>Apache web server with mod_rewrite</li>\n<li>PHP 5.2+</li>\n<li>MySQL 4.1+</li>\n<li>If you want to use the <a href=\"http://code.google.com/p/ruckusing/\">Ruckusing database migrations</a> you need PEAR\'s MDB2 and Log packages</li>\n</ul>\n<h3>Fresh installation</h3>\n<ol>\n<li>Extract the archive. Place the <em>wildflower</em> directory inside your web servers documents folder.</li>\n<li>Create a new MySQL database (<em>utf8_unicode_ci</em> collation is strongly recommented) and into this new database import the SQL file <span style=\"font-style: italic;\">app</span><em>/config/sql/wildflower.sql</em>.</li>\n<li>Edit the <em>app/config/database.php</em> file with your database connection details.</li>\n<li>You\'ve got a working copy of this site. You can start working on your project by modifying the application inside the <em>app</em> directory. When a new release of Wildflower comes, you simply replace the <em>cake</em>, <em>vendors</em> and <em>wildflower</em> directories.</li>\n<li>Access the admin area at <em>/admin</em>. The initial login/password combination is <strong>admin</strong>/<strong>admin321</strong>.</li>\n</ol>\n<h3>Installing to an existing CakePHP application</h3>\n<ol>\n<li>Extract the archive and place the <em>wildflower/wildflower</em> directory inside your application root.</li>\n<li>Just include the Wildflower <em>bootstrap.php</em> file located at <em>/wildflower/config/bootstrap.php</em> in your <em>/app/config/bootstrap.php</em>.</li>\n<li>Load the SQL dump file <em>app/config/sql/wildflower.sql</em>&nbsp;into your database.</li>\n<li>Set up some routes. Check the <em>wildflower/config/routes.php</em> file for the default WF routes.</li>\n<li>Your app_controller, app_model and app_helper files should extend WildflowerController, WildflowerModel and WildflowerHelper.</li>\n<li>Copy <em>app/webroot/css/wfadmin</em> from the archive to your <em>app/webroot/css</em>.</li>\n</ol>\n<h3>Basic principles</h3>\n<p>A modern website usually consist of \"static\" pages, news or blog sections, contact form, provides RSS feeds and a number of features, specific to the site\'s aim or goal. The idea of Wildflower is to provide this common functionality, with a polished and user friendly interface and enable the programmer to effectively code the remaining specific features of the site, fully exploiting the PHP rapid development framework--CakePHP.</p>\n<p>Wildflower uses the additional MVC paths feature of the CakePHP framework. It sits in it\'s own directory inside the application root. This allows the user to create application specific controllers, models or views in her <em>/app</em> directory. By mirroring any view file from the wildflower/views folder inside app/views you can override the default Wildflower files. This is a great way to customize any aspect of the CMS, especially extending the admin interface with additional sections or customizing existing ones to the site\'s needs without touching the original Wildflower code.</p>\n<h3>A real world example of building a site with some custom functionality</h3>\n<p>Imagine you want to build a simple site with the following requirements:</p>\n<ul>\n<li>Content managed \"static\" pages</li>\n<li>Contact form</li>\n<li>Home page with four boxes with different content and each content managed</li>\n</ul>\n<p>The first two requirements you\'ve got out of the box. For the third one we\'ll create a new section in the admin interface and build our own model/view/controller that will handle the custom functionality.</p>\n<h4>Step 1: Create a new database table</h4>\n<p>Let\'s create a very basic table to hold our data.</p>\n<p><code>CREATE TABLE home_page_boxes (<br /> &nbsp; id int(11) unsigned NOT NULL auto_increment,<br /> &nbsp; content text,<br /> &nbsp; PRIMARY KEY&nbsp; (id)<br /> );</code></p>\n<p>We\'ll be using 4 table rows to represent our boxes. Insert those right away:</p>\n<p><code>INSERT INTO home_page_boxes (id, content) VALUES(1, \'Box 1 content.\');<br /> INSERT INTO home_page_boxes (id, content) VALUES(2, \'Box 2 content.\');<br /> INSERT INTO home_page_boxes (id, content) VALUES(3, \'Box 3 content.\');<br /> INSERT INTO home_page_boxes (id, content) VALUES(4, \'Box 4 content.\');</code></p>\n<h4>Step 2: Create the MVC files</h4>\n<p>For this simple example we actually don\'t need to create any model file, since CakePHP supports <a href=\"http://www.littlehart.net/atthekeyboard/2008/08/05/dynamic-models-in-cakephp-12/\">dynamic models</a>. So let\'s create our controller. We\'ll create a file in <em>app/controllers/</em> called <em>home_page_boxes_controller.php</em> and put some code into it:</p>\n<pre>&lt;?php\nclass HomePageBoxesController extends AppController {\n&nbsp;&nbsp;&nbsp; \n&nbsp;&nbsp;&nbsp; function beforeFilter() {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; parent::beforeFilter();\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $this-&gt;pageTitle = \'Home\';\n&nbsp;&nbsp;&nbsp; }\n\n&nbsp;&nbsp;&nbsp; function admin_index() {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $boxes = $this-&gt;HomePageBox-&gt;find(\'all\', \'id IN (1, 2, 3, 4)\');\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $this-&gt;set(compact(\'boxes\'));\n&nbsp;&nbsp;&nbsp; }\n&nbsp;&nbsp;&nbsp; \n&nbsp;&nbsp;&nbsp; function admin_update() {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; foreach ($this-&gt;data[\'HomePageBox\'] as $name =&gt; $content) {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $id = explode(\'-\', $name);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $id = intval(array_pop($id));\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $data[\'HomePageBox\'] = array(\'id\' =&gt; $id, \'content\' =&gt; $content);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $this-&gt;HomePageBox-&gt;create($data);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $this-&gt;HomePageBox-&gt;save(); \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $this-&gt;redirect(array(\'action\' =&gt; \'index\'));\n&nbsp;&nbsp;&nbsp; }\n&nbsp;&nbsp;&nbsp; \n&nbsp;&nbsp;&nbsp; function index() {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $boxes = $this-&gt;HomePageBox-&gt;find(\'all\', \'id IN (1, 2, 3, 4)\');\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $this-&gt;set(compact(\'boxes\'));\n&nbsp;&nbsp;&nbsp; }\n&nbsp;&nbsp;&nbsp; \n}\n</pre>\n<p>This code handles populating the the homepage and the admin section with data and updating (saving) new content in the admin section. Let\'s create the view files. Create a new folder called <em>home_page_boxes</em> under <em>app/views/</em> . Under this folder add <em>admin_index.ctp</em> and <em>index.ctp</em> files.</p>\n<p><em>admin_index.ctp</em> could look like this:</p>\n<pre>&lt;h2&gt;Homepage Boxes&lt;/h2&gt;\n\n&lt;?php\n    echo $form-&gt;create(\'HomePageBox\', array(\'action\' =&gt; \'update\'));\n    \n    for ($i = 0; $i &lt; 4; $i++) {\n        echo \n        $form-&gt;input(\"content-{$boxes[$i][\'HomePageBox\'][\'id\']}\", \n            array(\'type\' =&gt; \'textbox\', \n                    \'value\' =&gt; $boxes[$i][\'HomePageBox\'][\'content\'], \n                    \'label\' =&gt; \'Box \' . ($i + 1), \'between\' =&gt; \'&lt;br /&gt;\', \'class\' =&gt; \'box-fck\')),\n        $form-&gt;submit(\'Save\');\n    }\n    \n    echo $form-&gt;end();\n?&gt;\n</pre>\n<p>This will create an admin page with four TinyMCE editors each handling one box. Let\'s take a look at the <em>index.ctp</em> file:</p>\n<pre>&lt;?php foreach ($boxes as $box) { ?&gt;\n\n&lt;div class=\"home-box\"&gt;\n    &lt;?php echo $box[\'HomePageBox\'][\'content\'] ?&gt;\n&lt;/div&gt;\n\n&lt;?php } ?&gt;\n</pre>\n<p>This will display the four boxes and their content.</p>\n<p>Now <strong>copy</strong> the <em>/wildflower/views/layout/admin_default.ctp</em> to <em>/app/views/layouts/</em> . There you can modify the file and add a link to our new home page boxes admin screen to the admin main menu. I\'ll leave this step to you. Remember: <strong>Every Wildflower view file that you mirror inside your app/views will be used instead of the original</strong>.</p>\n<h4>Step 3: Routes</h4>\n<p>Finally we need to let Cake know that we want to display the HomePageBoxesController::index() action when browsing to <em>your-site.com </em>root. Modify the first two routes in <em>app/config/routes.php</em> like this:</p>\n<pre>Router::connect(\'/\', array(\'controller\' =&gt; \'home_page_boxes\', \'action\' =&gt; \'index\'));\nRouter::connect(\'/app/webroot/\', array(\'controller\' =&gt; \'home_page_boxes\', \'action\' =&gt; \'index\'));\n</pre>\n<p>Maybe you\'re wondering about the second route. On some server configurations Cake incorrectly detects the site root (/) as <em>/app/webroot</em> . This fixes it. If you don\'t experience this problem (the home page works fine without the second route) you can remove the route.</p>\n<p>As you can see, Wildflower enables you to use all the CakePHP power together with the out of the box functionality.</p>','',NULL,0,'2008-02-27 16:20:00','2008-10-25 09:14:45','',0),(64,53,12,15,1,'features-and-pages','/feature-tour/features-and-pages','Code, code, code','<p class=\"cake-debug\">Hello world <a href=\"#title\">how</a> are we today.</p>\r\n<h2 class=\"cake-debug\">Heading &lt;h2&gt;</h2>\r\n<p style=\"padding-left: 30px;\">This option enables you to specify a custom CSS file that extends the theme content <span style=\"background-color: #ff9900;\">CSS</span>. This <span style=\"color: #ff6600;\">CSS</span> file is the one used within the editor (the editable area). This option can also be a comma separated list of URLs.</p>\r\n<p class=\"cake-debug\">If you specify a relative path, it is resolved in relation to the URL of the (HTML) file that includes TinyMCE, NOT relative to TinyMCE itself.</p>\r\n<p class=\"cake-debug\"><img src=\"/wildflower/img/thumb/vetton_ru_501.jpg/120/120/1\" alt=\"\" /><img src=\"/wildflower/img/thumb/All_falls_down-1440x900.jpg/120/120/1\" alt=\"\" /><img src=\"/wildflower/img/thumb/Step_forward_little_tommy-1400x1050.jpg/120/120/1\" alt=\"\" /><br /><span style=\"text-decoration: line-through;\">strike me</span></p>','',NULL,1,'2008-07-01 16:40:00','2008-08-11 12:11:19','',1),(79,64,13,14,2,'a-page-about-nothing','/feature-tour/features-and-pages/a-page-about-nothing','A page about nothing 12','<p>\'wf_update\' sad da as das asd 213 sadsa sadas asd</p>\n<p>&nbsp;</p>\n<p>sadsad</p>\n<p>sad</p>','',NULL,0,'2008-07-02 20:29:00','2008-10-20 13:20:26','<p>efgh</p>',0),(83,NULL,7,8,0,'bugs','/bugs','Bugs','<ul>\n<li>Post can be viewed even if draft</li>\n<li>Add new category parent select box shows parents that should not be available</li>\n<li>When trying to edit a non existent page an SQL error is shown</li>\n<li>Public search should not search in drafts</li>\n<li>Upload::create does not fill short_name</li>\n<li>Image browser CSS rf &amp; IE7 fixing</li>\n<li>Image browser can be open multiple times and get\'s fcked up</li>\n<li>I deleted a comment an another one got deleted</li>\n<li>Preview does not render home template</li>\n<li>Deleting a comment a clicking cancel deletes the comment!</li>\n<li>When a new revision gets added by AJAX the old first one remains with link witouth a rev num.</li>\n<li>Paging stuff needs to recompute itself after delete.</li>\n</ul>\n<p>Opera bugs:</p>\n<ul>\n<li>live search cancel...</li>\n</ul>\n<p>IE7:</p>\n<ul>\n<li>sub toolbar get f*cked up on page edit screen when a write new post/page is used and then canceled</li>\n</ul>','',NULL,0,'2008-07-07 08:43:00','2008-10-25 09:52:25','',0),(164,NULL,19,22,0,'root','/root','root','','',NULL,0,'2008-09-13 17:54:00','2008-09-13 17:54:48','',1),(158,NULL,17,18,0,'wf-is-the-best','/wf-is-the-best','UI facelift','<p>New graphic elements.</p>','',NULL,0,'2008-08-08 22:26:00','2008-10-08 20:49:39','',1),(116,NULL,9,10,0,'todo-enhancements','/todo-enhancements','TODO, Enhancements','<ul>\n<li>Add keyboard shortcuts - like alt-A go to index...etc.<br /></li>\n<li>Google sitemaps generation</li>\n<li>SWFupload</li>\n<li>Password strength check from Wordpress</li>\n<li>Shift click on list to select more items</li>\n<li>Pages list drag and drop</li>\n<li>JLM compression and caching</li>\n<li>File manager folders</li>\n</ul>\n<p><img src=\"/wildflower/img/thumb/The_night_is_coming-1400x1050.jpg/120/120/1\" alt=\"\" /></p>','',NULL,0,'2008-07-15 20:44:00','2008-10-24 15:56:28','<p>helo</p>',0),(157,52,2,3,1,'test-page','/home-features/test-page','test page','<p>I want candy!</p>','',NULL,0,'2008-08-08 18:21:00','2008-08-12 16:44:08','',1),(165,164,20,21,1,'child','/root/child','child','','',NULL,0,'2008-09-13 17:54:00','2008-10-07 16:08:18','',1),(167,NULL,23,24,0,'vranne-kone','/vranne-kone','Vranné kone','Lorem ipsum. Vranné kone.',NULL,NULL,0,'2008-10-24 15:11:38','2008-10-24 15:11:38',NULL,NULL),(171,NULL,27,28,0,'some-longer-title-with-number-467-1','/some-longer-title-with-number-467-1','Article 1','Lorem ipsum dolor sit amer. 123. čľž+áľšýí.11_?',NULL,NULL,0,'2008-10-24 16:54:20','2008-10-24 16:54:20',NULL,NULL),(168,NULL,NULL,NULL,0,'some-longer-title-with-number-467','/','Article 1','Lorem ipsum dolor sit amer. 123. čľž+áľšýí.11_?',NULL,NULL,0,'2008-10-24 15:11:38','2008-10-24 15:11:38',NULL,NULL),(170,NULL,25,26,0,'contact','/contact','Contact formular','<p>This is a contact form for you.</p>','',NULL,0,'2008-10-24 15:12:00','2008-10-24 16:03:42','',0);
/*!40000 ALTER TABLE `pages` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `posts`
--

DROP TABLE IF EXISTS `posts`;
SET @saved_cs_client     = @@character_set_client;
SET character_set_client = utf8;
CREATE TABLE `posts` (
  `id` int(11) NOT NULL auto_increment,
  `slug` varchar(255) collate utf8_unicode_ci NOT NULL,
  `title` varchar(255) collate utf8_unicode_ci NOT NULL,
  `content` text collate utf8_unicode_ci,
  `user_id` int(11) NOT NULL COMMENT 'ID of the author of the post.',
  `description_meta_tag` text collate utf8_unicode_ci,
  `keywords_meta_tag` text collate utf8_unicode_ci,
  `created` datetime NOT NULL,
  `updated` datetime NOT NULL,
  `draft` int(1) NOT NULL default '0',
  PRIMARY KEY  (`id`),
  UNIQUE KEY `slug` (`slug`),
  FULLTEXT KEY `content` (`content`)
) ENGINE=MyISAM AUTO_INCREMENT=34 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;
SET character_set_client = @saved_cs_client;

--
-- Dumping data for table `posts`
--

LOCK TABLES `posts` WRITE;
/*!40000 ALTER TABLE `posts` DISABLE KEYS */;
INSERT INTO `posts` VALUES (1,'a-shiny-new-post','There are not many posts out there','<div id=\"lipsum\">\n<p>Lorem ipsum dolor sit amet, consectetuer adipiscing elit. In imperdiet odio in augue. Sed pharetra. Nullam faucibus odio. Nam rhoncus tristique augue. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Integer congue dapibus metus. Phasellus sed elit sodales orci iaculis tincidunt. Duis hendrerit, nulla eu hendrerit fermentum, diam sapien commodo enim, sed rutrum purus sapien sed pede. Phasellus vitae quam. Morbi aliquam, leo vitae consectetuer consectetuer, ligula diam volutpat eros, imperdiet egestas nulla tortor ac dui. Etiam feugiat, dui nec pharetra pharetra, erat augue vulputate sapien, ut tristique lacus felis at eros. Pellentesque eu erat. Nullam aliquet mollis dolor. Ut est orci, tempus pellentesque, semper sit amet, scelerisque in, quam. Aliquam consequat, orci nec ullamcorper condimentum, nibh ligula dictum nulla, eget pulvinar velit lacus sit amet nulla. Etiam semper faucibus mi. Aenean nunc sapien, venenatis vitae, dapibus sit amet, auctor non, lacus. Phasellus porttitor ante sit amet turpis. Vestibulum nec erat. Maecenas eros.</p>\n<p><img src=\"/wildflower/img/thumb/Good_Vibrations-1440x900.jpg/120/120/1\" alt=\"\" /></p>\n<p>Nullam quis nulla non sapien interdum varius. Cras hendrerit elementum leo. Fusce tincidunt, justo eu eleifend elementum, ante arcu blandit dolor, quis ullamcorper dui tellus sit amet quam. Vestibulum vulputate. Morbi mi odio, consectetuer ut, vulputate vitae, tristique ut, ipsum. Donec ipsum tortor, pulvinar a, pulvinar eget, commodo non, odio. Nullam dolor. Aliquam erat volutpat. Phasellus libero. Vivamus luctus lobortis libero. Ut ut elit. Sed elementum quam nec arcu. Nam id tellus non odio fermentum convallis. Nam a lacus.</p>\n<p>Phasellus ante arcu, gravida a, lobortis sit amet, volutpat non, velit. Nulla consectetuer quam gravida nulla. Integer eu purus. Morbi sit amet nunc. Mauris vehicula lacus ac lectus. Proin tortor nisl, faucibus non, molestie nec, tincidunt non, justo. Suspendisse massa lectus, hendrerit aliquam, elementum et, iaculis non, nunc. Etiam non dui. Morbi gravida massa sollicitudin ipsum. Suspendisse magna ante, facilisis ac, sagittis et, placerat et, diam. Fusce facilisis, nulla ac accumsan facilisis, mi nisi tristique quam, malesuada pulvinar neque leo ut augue. Mauris dui.</p>\n<p>Etiam nec risus at leo ullamcorper lobortis. In rhoncus massa ac velit. Nullam mollis consequat ligula. Integer iaculis, enim sed cursus hendrerit, neque dolor hendrerit erat, dignissim egestas quam quam vel quam. Etiam tellus libero, molestie non, mattis in, venenatis sed, dui. Proin non nisl ut massa ullamcorper interdum. Aliquam erat volutpat. Sed gravida. Quisque quis magna. Quisque non metus. Nullam euismod suscipit elit. Vivamus quis risus. Phasellus ut lectus. Nunc velit sem, viverra sed, convallis eu, convallis a, nisl. Maecenas bibendum orci in enim. Sed orci. Nullam adipiscing pellentesque purus. Sed risus orci, consequat nec, ornare sed, condimentum semper, mi. Fusce hendrerit, justo non volutpat pretium, neque mauris placerat est, id pretium mauris libero id eros.</p>\n<p>Sed risus mi, vestibulum ac, tincidunt at, condimentum id, tortor. Donec non mauris sed leo auctor auctor. Nullam facilisis. Quisque eu ipsum. Donec quis sem. Morbi rutrum magna in justo. Vestibulum eu orci. Praesent placerat, ipsum eget bibendum vulputate, velit dolor ultrices metus, tempus congue est lorem a eros. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia Curae; Nam consectetuer erat et urna.</p>\n</div>',1,'bla bla bla','','2008-09-11 14:48:00','2008-11-01 12:44:03',0),(2,'another-new-post','Another new post','<h1 class=\"firstHeading\">Lorem ipsum</h1>\n<h3 id=\"siteSub\">From Wikipedia, the free encyclopedia</h3>\n<div id=\"jump-to-nav\">Jump to: <a href=\"http://en.wikipedia.org/wiki/Lorem_ipsum#column-one\">navigation</a>, <a href=\"http://en.wikipedia.org/wiki/Lorem_ipsum#searchInput\">search</a></div>\n<!-- start content --> \n<table class=\"metadata plainlinks ambox ambox-content\" border=\"0\">\n<tbody>\n<tr>\n<td class=\"mbox-image\">\n<div style=\"width: 52px;\"><a class=\"image\" title=\"Question book-new.svg\" href=\"http://en.wikipedia.org/wiki/Image:Question_book-new.svg\"><img src=\"http://upload.wikimedia.org/wikipedia/en/thumb/9/99/Question_book-new.svg/50px-Question_book-new.svg.png\" border=\"0\" alt=\"\" width=\"50\" height=\"39\" /></a></div>\n</td>\n<td class=\"mbox-text\"><strong>This article needs additional <a title=\"Wikipedia:Citing sources\" href=\"http://en.wikipedia.org/wiki/Wikipedia:Citing_sources\">citations</a> for <a title=\"Wikipedia:Verifiability\" href=\"http://en.wikipedia.org/wiki/Wikipedia:Verifiability\">verification</a>.</strong><br /> <small>Please help <a class=\"external text\" title=\"http://en.wikipedia.org/w/index.php?title=Lorem_ipsum&amp;action=edit\" rel=\"nofollow\" href=\"http://en.wikipedia.org/w/index.php?title=Lorem_ipsum&amp;action=edit\">improve this article</a> by adding <a title=\"Wikipedia:Reliable sources\" href=\"http://en.wikipedia.org/wiki/Wikipedia:Reliable_sources\">reliable references</a>. Unsourced material may be <a title=\"Template:Fact\" href=\"http://en.wikipedia.org/wiki/Template:Fact\">challenged</a> and removed. <em>(April 2008)</em></small></td>\n</tr>\n</tbody>\n</table>\n<dl><dd><em>For the Wikipedia template, see <a title=\"Template:Lorem ipsum\" href=\"http://en.wikipedia.org/wiki/Template:Lorem_ipsum\">lorem ipsum</a></em></dd></dl>\n<div class=\"thumb tright\">\n<div class=\"thumbinner\" style=\"width: 302px;\"><a class=\"image\" title=\"Using lorem ipsum to focus attention on graphic elements in a website design proposal.\" href=\"http://en.wikipedia.org/wiki/Image:Lorem_ipsum_design.svg\"><img class=\"thumbimage\" src=\"http://upload.wikimedia.org/wikipedia/commons/thumb/8/86/Lorem_ipsum_design.svg/300px-Lorem_ipsum_design.svg.png\" border=\"0\" alt=\"Using lorem ipsum to focus attention on graphic elements in a website design proposal.\" width=\"300\" height=\"337\" /></a>\n<div class=\"thumbcaption\">\n<div class=\"magnify\"><a class=\"internal\" title=\"Enlarge\" href=\"http://en.wikipedia.org/wiki/Image:Lorem_ipsum_design.svg\"><img src=\"http://en.wikipedia.org/skins-1.5/common/images/magnify-clip.png\" alt=\"\" width=\"15\" height=\"11\" /></a></div>\nUsing <em>lorem ipsum</em> to focus attention on graphic elements in a website design proposal.</div>\n</div>\n</div>\n<p>In <a title=\"Publishing\" href=\"http://en.wikipedia.org/wiki/Publishing\">publishing</a> and <a title=\"Graphic design\" href=\"http://en.wikipedia.org/wiki/Graphic_design\">graphic design</a>, <strong>lorem ipsum</strong> is common <a class=\"mw-redirect\" title=\"Placeholder text\" href=\"http://en.wikipedia.org/wiki/Placeholder_text\">placeholder text</a> used to demonstrate the <a title=\"Graphics\" href=\"http://en.wikipedia.org/wiki/Graphics\">graphic</a> elements of a document or visual presentation, such as <a title=\"Font\" href=\"http://en.wikipedia.org/wiki/Font\">font</a>, <a title=\"Typography\" href=\"http://en.wikipedia.org/wiki/Typography\">typography</a>, and <a title=\"Layout\" href=\"http://en.wikipedia.org/wiki/Layout\">layout</a>. It is a form of \"<a title=\"Greeking\" href=\"http://en.wikipedia.org/wiki/Greeking\">greeking</a>\".</p>\n<p>Even though using \"lorem ipsum\" often arouses curiosity due to its resemblance to classical <a title=\"Latin\" href=\"http://en.wikipedia.org/wiki/Latin\">Latin</a>, it is not intended to have meaning. Where text is visible in a document, people tend to focus on the textual content rather than upon overall presentation, so publishers use <em>lorem ipsum</em> when displaying a <a title=\"Typeface\" href=\"http://en.wikipedia.org/wiki/Typeface\">typeface</a> or design in order to direct the focus to presentation. \"Lorem ipsum\" also approximates a typical distribution of spaces in <a title=\"English language\" href=\"http://en.wikipedia.org/wiki/English_language\">English</a><sup class=\"noprint Template-Fact\"><span style=\"white-space: nowrap;\" title=\"This claim needs references to reliable sources&nbsp;since August 2008\">[<em><a title=\"Wikipedia:Citation needed\" href=\"http://en.wikipedia.org/wiki/Wikipedia:Citation_needed\">citation needed</a></em>]</span></sup>.</p>\n<p>The most common <em>lorem ipsum</em> text reads as follows:</p>\n<dl><dd><em>Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</em></dd></dl> \n<table id=\"toc\" class=\"toc\" border=\"0\" summary=\"Contents\">\n<tbody>\n<tr>\n<td>\n<div id=\"toctitle\">\n<h2>Contents</h2>\n<span class=\"toctoggle\">[<a id=\"togglelink\" class=\"internal\" href=\"javascript:toggleToc()\">hide</a>]</span></div>\n<ul>\n<li class=\"toclevel-1\"><a href=\"http://en.wikipedia.org/wiki/Lorem_ipsum#History_and_discovery\"><span class=\"tocnumber\">1</span> <span class=\"toctext\">History and discovery</span></a></li>\n<li class=\"toclevel-1\"><a href=\"http://en.wikipedia.org/wiki/Lorem_ipsum#English_translation\"><span class=\"tocnumber\">2</span> <span class=\"toctext\">English translation</span></a></li>\n<li class=\"toclevel-1\"><a href=\"http://en.wikipedia.org/wiki/Lorem_ipsum#Variations\"><span class=\"tocnumber\">3</span> <span class=\"toctext\">Variations</span></a></li>\n<li class=\"toclevel-1\"><a href=\"http://en.wikipedia.org/wiki/Lorem_ipsum#See_also\"><span class=\"tocnumber\">4</span> <span class=\"toctext\">See also</span></a></li>\n<li class=\"toclevel-1\"><a href=\"http://en.wikipedia.org/wiki/Lorem_ipsum#References\"><span class=\"tocnumber\">5</span> <span class=\"toctext\">References</span></a></li>\n<li class=\"toclevel-1\"><a href=\"http://en.wikipedia.org/wiki/Lorem_ipsum#External_links\"><span class=\"tocnumber\">6</span> <span class=\"toctext\">External links</span></a></li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n<p>\n<script type=\"text/javascript\">\n//&lt;![CDATA[\n if (window.showTocToggle) { var tocShowText = \"show\"; var tocHideText = \"hide\"; showTocToggle(); } \n//]]&gt;\n</script>\n</p>\n<p><a id=\"History_and_discovery\" name=\"History_and_discovery\"></a></p>\n<h2><span class=\"editsection\">[<a title=\"Edit section: History and discovery\" href=\"http://en.wikipedia.org/w/index.php?title=Lorem_ipsum&amp;action=edit&amp;section=1\">edit</a>]</span> <span class=\"mw-headline\">History and discovery</span></h2>\n<p>The text is derived from <a title=\"Cicero\" href=\"http://en.wikipedia.org/wiki/Cicero\">Cicero</a>\'s <em><a class=\"new\" title=\"De Finibus Bonorum et Malorum (page does not exist)\" href=\"http://en.wikipedia.org/w/index.php?title=De_Finibus_Bonorum_et_Malorum&amp;action=edit&amp;redlink=1\">De Finibus Bonorum et Malorum</a></em> (<em>On the Ends of Goods and Evils</em>, or alternatively <em>[About] The Purposes of Good and Evil</em> ).<sup id=\"cite_ref-Microsoft_0-0\" class=\"reference\"><a href=\"http://en.wikipedia.org/wiki/Lorem_ipsum#cite_note-Microsoft-0\">[1]</a></sup> The original passage began: <em>Neque porro quisquam est qui do<strong>lorem ipsum</strong> quia <strong>dolor sit amet, consectetur, adipisci</strong> v<strong>elit</strong></em> (Translation: \"Neither is there anyone who loves grief itself since it is grief and thus wants to obtain it\"). It is not known exactly when the text acquired its current standard form; it may have been as late as the 1960s. The passage was discovered by <a class=\"new\" title=\"Richard McClintock (page does not exist)\" href=\"http://en.wikipedia.org/w/index.php?title=Richard_McClintock&amp;action=edit&amp;redlink=1\">Richard McClintock</a>, a <a title=\"Latin\" href=\"http://en.wikipedia.org/wiki/Latin\">Latin</a> scholar who is the publications director at <a title=\"Hampden-Sydney College\" href=\"http://en.wikipedia.org/wiki/Hampden-Sydney_College\">Hampden-Sydney College</a> in <a title=\"Virginia\" href=\"http://en.wikipedia.org/wiki/Virginia\">Virginia</a>, by searching for citings of the rarely used word \'consectetur\' in classical literature.</p>\n<p>The original version (with the excerpted items highlighted):</p>\n<dl><dd>[32] Sed ut perspiciatis, unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam eaque ipsa, quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt, explicabo. Nemo enim ipsam voluptatem, quia voluptas sit, aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos, qui ratione voluptatem sequi nesciunt, neque porro quisquam est, qui do<strong>lorem ipsum</strong>, quia <strong>dolor sit, amet, consectetur, adipisci</strong> v<strong>elit, sed</strong> quia non numquam <strong>eius mod</strong>i <strong>tempor</strong>a <strong>incidunt, ut labore et dolore magna</strong>m <strong>aliqua</strong>m quaerat voluptatem. <strong>Ut enim ad minim</strong>a <strong>veniam, quis nostru</strong>m <strong>exercitation</strong>em <strong>ullam co</strong>rporis suscipit <strong>labori</strong>o<strong>s</strong>am, <strong>nisi ut aliquid ex ea commod</strong>i <strong>consequat</strong>ur? <strong>Quis aute</strong>m vel eum <strong>iure reprehenderit,</strong> qui <strong>in</strong> ea <strong>voluptate velit esse</strong>, quam nihil molestiae <strong>c</strong>onsequatur, vel <strong>illum</strong>, qui <strong>dolore</strong>m <strong>eu</strong>m <strong>fugiat</strong>, quo voluptas <strong>nulla pariatur</strong>? [33] At vero eos et accusamus et iusto odio dignissimos ducimus, qui blanditiis praesentium voluptatum deleniti atque corrupti, quos dolores et quas molestias <strong>exceptur</strong>i <strong>sint, obcaecat</strong>i <strong>cupiditat</strong>e <strong>non pro</strong>v<strong>ident</strong>, similique <strong>sunt in culpa</strong>, <strong>qui officia deserunt mollit</strong>ia <strong>anim</strong>i, <strong>id est laborum</strong> et dolorum fuga. Et harum quidem rerum facilis est et expedita distinctio. Nam libero tempore, cum soluta nobis est eligendi optio, cumque nihil impedit, quo minus id, quod maxime placeat, facere possimus, omnis voluptas assumenda est, omnis dolor repellendus. Temporibus autem quibusdam et aut officiis debitis aut rerum necessitatibus saepe eveniet, ut et voluptates repudiandae sint et molestiae non recusandae. Itaque earum rerum hic tenetur a sapiente delectus, ut aut reiciendis voluptatibus maiores alias consequatur aut perferendis doloribus asperiores repellat.</dd></dl>\n<p><a id=\"English_translation\" name=\"English_translation\"></a></p>\n<h2><span class=\"editsection\">[<a title=\"Edit section: English translation\" href=\"http://en.wikipedia.org/w/index.php?title=Lorem_ipsum&amp;action=edit&amp;section=2\">edit</a>]</span> <span class=\"mw-headline\">English translation</span></h2>\n<p>Cicero\'s original text:</p>\n<dl><dd>&hellip;neque porro quisquam est, qui dolorem ipsum quia dolor sit amet, consectetur, adipisci velit, sed quia non numquam eius modi tempora incidunt ut labore et dolore magnam aliquam quaerat voluptatem. Ut enim ad minima veniam, quis nostrum exercitationem ullam corporis suscipit laboriosam, nisi ut aliquid ex ea commodi consequatur? Quis autem vel eum iure reprehenderit qui in ea voluptate velit esse quam nihil molestiae consequatur, vel illum qui dolorem eum fugiat quo voluptas nulla pariatur?\"</dd></dl>\n<p>H. Rackham\'s 1914 translation:</p>\n<dl><dd>Nor again is there anyone who loves or pursues or desires to obtain pain of itself, because it is pain, but because occasionally circumstances occur in which toil and pain can procure him some great pleasure. To take a trivial example, which of us ever undertakes laborious physical exercise, except to obtain some advantage from it? But who has any right to find fault with a man who chooses to enjoy a pleasure that has no annoying consequences, or one who avoids a pain that produces no resultant pleasure?</dd></dl>\n<p><a id=\"Variations\" name=\"Variations\"></a></p>\n<h2><span class=\"editsection\">[<a title=\"Edit section: Variations\" href=\"http://en.wikipedia.org/w/index.php?title=Lorem_ipsum&amp;action=edit&amp;section=3\">edit</a>]</span> <span class=\"mw-headline\">Variations</span></h2>\n<p>Many variations on the standard <em>lorem ipsum</em> text exist, some with little resemblance to the original. Other versions have additional letters &mdash; such as <em>k</em>, <em>w</em>, and <em>z</em> &mdash; that were uncommon or missing in the Latin language, and nonsense words such as <em>Z.zril</em>, <em>takimata</em>, and <em>gubergren</em> added to the original passage to achieve a distribution of letters that more closely approximates English.</p>\n<p>Cicero\'s first <a title=\"Catiline Orations\" href=\"http://en.wikipedia.org/wiki/Catiline_Orations\">Oration against Catiline</a> is sometimes used in <a title=\"Typesetting\" href=\"http://en.wikipedia.org/wiki/Typesetting\">type specimens</a>: <em>Quousque tandem abutere, Catilina, patientia nostra? Quamdiu etiam furor iste tuus nos eludet? .&nbsp;.&nbsp;.</em></p>\n<p>Today\'s popular version of <em>lorem ipsum</em> was first created for <a class=\"mw-redirect\" title=\"Aldus Corporation\" href=\"http://en.wikipedia.org/wiki/Aldus_Corporation\">Aldus Corporation</a>\'s first <a title=\"Desktop publishing\" href=\"http://en.wikipedia.org/wiki/Desktop_publishing\">desktop publishing</a> program <a title=\"Adobe PageMaker\" href=\"http://en.wikipedia.org/wiki/Adobe_PageMaker\">Aldus PageMaker</a> in the mid-1980s for the <a class=\"mw-redirect\" title=\"Apple Macintosh\" href=\"http://en.wikipedia.org/wiki/Apple_Macintosh\">Apple Macintosh</a>. <a title=\"Art director\" href=\"http://en.wikipedia.org/wiki/Art_director\">Art director</a> Laura Perry adapted older forms of the <em>lorem</em> text from <a title=\"Typography\" href=\"http://en.wikipedia.org/wiki/Typography\">typography</a> samples - it was, for example, widely used in <a title=\"Letraset\" href=\"http://en.wikipedia.org/wiki/Letraset\">Letraset</a> catalogs in the 1960s and 1970s. The text was frequently used in PageMaker <a title=\"Template (word processing)\" href=\"http://en.wikipedia.org/wiki/Template_%28word_processing%29\">templates</a>.</p>\n<p>Various pieces of software, including text editors (or plug-in modules for same), can generate semi-random \"lorem text\" that often has little or nothing in common with the canonical variety, other than looking like (and often being) jumbled Latin. Apple\'s <a title=\"Pages\" href=\"http://en.wikipedia.org/wiki/Pages\">Pages</a> software uses this jumbled text as a sample screenplay for their screenplay layout.</p>\n<p><a id=\"See_also\" name=\"See_also\"></a></p>\n<h2><span class=\"editsection\">[<a title=\"Edit section: See also\" href=\"http://en.wikipedia.org/w/index.php?title=Lorem_ipsum&amp;action=edit&amp;section=4\">edit</a>]</span> <span class=\"mw-headline\">See also</span></h2>\n<ul>\n<li><a title=\"Greeking\" href=\"http://en.wikipedia.org/wiki/Greeking\">Greeking</a></li>\n<li><a title=\"List of Latin phrases\" href=\"http://en.wikipedia.org/wiki/List_of_Latin_phrases\">List of Latin phrases</a></li>\n<li><a title=\"Li Europan lingues\" href=\"http://en.wikipedia.org/wiki/Li_Europan_lingues\">Li Europan lingues</a></li>\n<li><a class=\"mw-redirect\" title=\"Etaoin shrdlu\" href=\"http://en.wikipedia.org/wiki/Etaoin_shrdlu\">Etaoin shrdlu</a></li>\n<li><a title=\"The quick brown fox jumps over the lazy dog\" href=\"http://en.wikipedia.org/wiki/The_quick_brown_fox_jumps_over_the_lazy_dog\">The quick brown fox jumps over the lazy dog</a></li>\n<li><a title=\"Metasyntactic variable\" href=\"http://en.wikipedia.org/wiki/Metasyntactic_variable\">Metasyntactic variable</a></li>\n</ul>\n<p><a id=\"References\" name=\"References\"></a></p>\n<h2><span class=\"editsection\">[<a title=\"Edit section: References\" href=\"http://en.wikipedia.org/w/index.php?title=Lorem_ipsum&amp;action=edit&amp;section=5\">edit</a>]</span> <span class=\"mw-headline\">References</span></h2>\n<div class=\"references-small\"><ol class=\"references\">\n<li id=\"cite_note-Microsoft-0\"><strong><a href=\"http://en.wikipedia.org/wiki/Lorem_ipsum#cite_ref-Microsoft_0-0\">^</a></strong> \"<a class=\"external text\" title=\"http://support.microsoft.com/kb/114222/en-us\" rel=\"nofollow\" href=\"http://support.microsoft.com/kb/114222/en-us\">Description of the \"Lorem ipsum dolor sit amet\" text that appears in Word Help</a>\" (HTML).  Microsoft. Retrieved on <a title=\"2007\" href=\"http://en.wikipedia.org/wiki/2007\">2007</a>-<a title=\"March 22\" href=\"http://en.wikipedia.org/wiki/March_22\">03-22</a>.</li>\n</ol></div>\n<p><a id=\"External_links\" name=\"External_links\"></a></p>\n<h2><span class=\"editsection\">[<a title=\"Edit section: External links\" href=\"http://en.wikipedia.org/w/index.php?title=Lorem_ipsum&amp;action=edit&amp;section=6\">edit</a>]</span> <span class=\"mw-headline\">External links</span></h2>\n<div class=\"infobox sisterproject\">\n<div style=\"float: left;\">\n<div><a title=\"Commons:Lorem ipsum\" href=\"http://commons.wikimedia.org/wiki/Lorem_ipsum\"><img src=\"http://upload.wikimedia.org/wikipedia/en/thumb/4/4a/Commons-logo.svg/50px-Commons-logo.svg.png\" border=\"0\" alt=\"\" width=\"50\" height=\"67\" /></a></div>\n</div>\n<div style=\"margin-left: 60px;\"><a title=\"Wikimedia Commons\" href=\"http://en.wikipedia.org/wiki/Wikimedia_Commons\">Wikimedia Commons</a> has media related to:\n<div style=\"margin-left: 10px;\"><em><strong><a class=\"extiw\" title=\"commons:Lorem ipsum\" href=\"http://commons.wikimedia.org/wiki/Lorem_ipsum\">Lorem ipsum</a></strong></em></div>\n</div>\n</div>\n<div class=\"infobox sisterproject\">\n<div class=\"floatleft\"><span><a class=\"image\" title=\"Wikisource-logo.svg\" href=\"http://en.wikipedia.org/wiki/Image:Wikisource-logo.svg\"><img src=\"http://upload.wikimedia.org/wikipedia/commons/thumb/4/4c/Wikisource-logo.svg/50px-Wikisource-logo.svg.png\" border=\"0\" alt=\"\" width=\"50\" height=\"52\" /></a></span></div>\n<div style=\"margin-left: 60px;\"><a title=\"Wikisource\" href=\"http://en.wikipedia.org/wiki/Wikisource\">Wikisource</a> has original text related to this article:\n<div style=\"margin-left: 10px;\"><em><strong><a class=\"extiw\" title=\"wikisource:Lorem ipsum\" href=\"http://en.wikisource.org/wiki/Lorem_ipsum\">Lorem ipsum</a></strong></em></div>\n</div>\n</div>\n<div class=\"infobox sisterproject\" style=\"float: right;\">\n<div style=\"float: left;\">\n<div class=\"floatnone\"><span><a class=\"image\" title=\"Wiktionary-logo-en.svg\" href=\"http://en.wikipedia.org/wiki/Image:Wiktionary-logo-en.svg\"><img src=\"http://upload.wikimedia.org/wikipedia/commons/thumb/f/f8/Wiktionary-logo-en.svg/49px-Wiktionary-logo-en.svg.png\" border=\"0\" alt=\"\" width=\"49\" height=\"53\" /></a></span></div>\n</div>\n<div style=\"margin-left: 60px;\">Look up <em><strong><a class=\"extiw\" title=\"wiktionary:Lorem ipsum\" href=\"http://en.wiktionary.org/wiki/Lorem_ipsum\">Lorem ipsum</a></strong></em> in<br /> <a title=\"Wiktionary\" href=\"http://en.wikipedia.org/wiki/Wiktionary\">Wiktionary</a>, the free dictionary.</div>\n</div>\n<ul>\n<li><a class=\"external text\" title=\"http://lorem-ipsum-dolor-sit-amet.com\" rel=\"nofollow\" href=\"http://lorem-ipsum-dolor-sit-amet.com/\">Lorem Ipsum Dolor Sit Amet</a> &mdash; Lorem ipsum and different kinds of greeking texts.</li>\n<li><a class=\"external text\" title=\"http://www.straightdope.com/columns/010216.html\" rel=\"nofollow\" href=\"http://www.straightdope.com/columns/010216.html\">The Straight Dope</a> &mdash; Cecil Adams\' explanation of Lorem ipsum.</li>\n</ul>',0,'',NULL,'2006-09-11 14:48:00','2008-10-25 09:17:13',0),(8,'use-base','use Base','<p>1234</p>\n<p><img src=\"/wildflower/img/thumb/Fantasia-1600x1200.jpg/120/120/1\" alt=\"\" /></p>',1,'',NULL,'2007-07-12 11:05:00','2008-08-26 19:23:55',1),(33,'ff','ff',NULL,0,NULL,NULL,'2008-10-26 12:12:28','2008-10-26 12:12:28',1),(32,'999','999','<p>Numbers.</p>\n<div class=\"memdoc\">\n<p>Loads a class, registers the object in the registry and returns instance of the object.</p>\n<p>&nbsp;</p>\n<dl><dt><strong>Parameters:</strong></dt><dd> \n<table border=\"0\" cellspacing=\"2\" cellpadding=\"0\">\n<tbody>\n<tr>\n<td valign=\"top\"></td>\n<td valign=\"top\"><em>mixed</em>&nbsp;</td>\n<td>$class as a string or a single key =&gt; value array instance will be created, stored in the registry and returned. Required: array(\'class\' =&gt; \'ClassName\', \'alias\' =&gt; \'AliasNameStoredInTheRegistry\', \'type\' =&gt; \'TypeOfClass\'); <a class=\"el\" href=\"http://api.cakephp.org/1.2/class_model.html\">Model</a> Classes can accept optional array(\'id\' =&gt; $id, \'table\' =&gt; $table, \'ds\' =&gt; $ds, \'alias\' =&gt; $alias); When $class is a numeric keyed array, multiple class instances will be stored in the registry, no instance of the object will be returned array( array(\'class\' =&gt; \'ClassName\', \'alias\' =&gt; \'AliasNameStoredInTheRegistry\', \'type\' =&gt; \'TypeOfClass\'), array(\'class\' =&gt; \'ClassName\', \'alias\' =&gt; \'AliasNameStoredInTheRegistry\', \'type\' =&gt; \'TypeOfClass\'), array(\'class\' =&gt; \'ClassName\', \'alias\' =&gt; \'AliasNameStoredInTheRegistry\', \'type\' =&gt; \'TypeOfClass\'));</td>\n</tr>\n<tr>\n<td valign=\"top\"></td>\n<td valign=\"top\"><em>string</em>&nbsp;</td>\n<td>$type TypeOfClass</td>\n</tr>\n</tbody>\n</table>\n</dd></dl> <dl class=\"return\"><dt><strong>Returns:</strong></dt><dd>object intance of ClassName </dd></dl>\n<p>Definition at line <a class=\"el\" href=\"http://api.cakephp.org/1.2/class__registry_8php-source.html#l00083\">83</a> of file <a class=\"el\" href=\"http://api.cakephp.org/1.2/class__registry_8php-source.html\">class_registry.php</a>.</p>\n<p>References <a class=\"el\" href=\"http://api.cakephp.org/1.2/class__registry_8php-source.html#l00247\">_duplicate()</a>, <a class=\"el\" href=\"http://api.cakephp.org/1.2/basics_8php-source.html#l00225\">a()</a>, <a class=\"el\" href=\"http://api.cakephp.org/1.2/class__registry_8php-source.html#l00060\">getInstance()</a>, and <a class=\"el\" href=\"http://api.cakephp.org/1.2/configure_8php-source.html#l00761\">App::import()</a>.</p>\n<p>Referenced by <a class=\"el\" href=\"http://api.cakephp.org/1.2/shell_8php-source.html#l00213\">Shell::_loadModels()</a>, <a class=\"el\" href=\"http://api.cakephp.org/1.2/auth_8php-source.html#l00689\">AuthComponent::getModel()</a>, <a class=\"el\" href=\"http://api.cakephp.org/1.2/libs_2controller_2controller_8php-source.html#l00418\">Controller::loadModel()</a>, <a class=\"el\" href=\"http://api.cakephp.org/1.2/cake_2libs_2model_2db__acl_8php-source.html#l00078\">AclNode::node()</a>, <a class=\"el\" href=\"http://api.cakephp.org/1.2/libs_2model_2schema_8php-source.html#l00175\">CakeSchema::read()</a>, and <a class=\"el\" href=\"http://api.cakephp.org/1.2/translate_8php-source.html#l00316\">TranslateBehavior::translateModel()</a>.</p>\n</div>',0,'',NULL,'2008-10-24 16:10:00','2008-10-25 08:32:20',0),(28,'my-new-post-1','Unit tests are good. Do them.','<p>&nbsp;</p>\n<div id=\"actions\">\n<div id=\"logo\"><a href=\"http://simpletest.org/index.html\"><img id=\"simpletestlogo\" src=\"http://simpletest.org/images/simpletest-logo.png\" border=\"0\" alt=\"\" width=\"335\" height=\"127\" /></a></div>\n<div>\n<div><a href=\"http://simpletest.org/en/download.html\"><img id=\"simpletestdownload\" src=\"http://simpletest.org/images/simpletest-download.png\" border=\"0\" alt=\"\" width=\"306\" height=\"109\" /></a></div>\n<div><a href=\"http://simpletest.org/en/start-testing.html\"><img id=\"simpleteststarttesting\" src=\"http://simpletest.org/images/simpletest-start-testing.png\" border=\"0\" alt=\"\" width=\"306\" height=\"109\" /></a>\n<ul>\n<li><a href=\"http://simpletest.org/en/start-testing.html\">Start testing with SimpleTest</a></li>\n<li><a href=\"http://simpletest.org/en/overview.html\">Documentation overview</a>\n<ul>\n<li><a href=\"http://simpletest.org/en/unit_test_documentation.html\">Unit tester</a></li>\n<li><a href=\"http://simpletest.org/en/group_test_documentation.html\">Group tests</a></li>\n<li><a href=\"http://simpletest.org/en/mock_objects_documentation.html\">Mock objects</a></li>\n<li><a href=\"http://simpletest.org/en/partial_mocks_documentation.html\">Partial mocks</a></li>\n<li><a href=\"http://simpletest.org/en/reporter_documentation.html\">Reporting</a></li>\n<li><a href=\"http://simpletest.org/en/expectation_documentation.html\">Expectations</a></li>\n<li><a href=\"http://simpletest.org/en/web_tester_documentation.html\">Web tester</a></li>\n<li><a href=\"http://simpletest.org/en/form_testing_documentation.html\">Testing forms</a></li>\n<li><a href=\"http://simpletest.org/en/authentication_documentation.html\">Authentication</a></li>\n<li><a href=\"http://simpletest.org/en/browser_documentation.html\">Scriptable browser</a></li>\n</ul>\n</li>\n<li><a href=\"http://simpletest.org/en/first_test_tutorial.html\">Tutorial : unit testing with PHP</a></li>\n<li><a href=\"http://simpletest.org/en/experimental_intro.html\">Experimental stuff (in SVN only)</a></li>\n</ul>\n</div>\n<div><a href=\"http://simpletest.org/en/support.html\"><img id=\"simpletestsupport\" src=\"http://simpletest.org/images/simpletest-support.png\" border=\"0\" alt=\"\" width=\"306\" height=\"109\" /></a></div>\n<div><a href=\"http://simpletest.org/en/todo.html\"><img id=\"simpletestcontribute\" src=\"http://simpletest.org/images/simpletest-contribute.png\" border=\"0\" alt=\"\" width=\"306\" height=\"109\" /></a></div>\n<div id=\"credits\"><a href=\"http://sourceforge.net/projects/simpletest\"><img src=\"http://sourceforge.net/sflogo.php?group_id=76550&amp;type=1\" border=\"0\" alt=\"SourceForge.net Logo\" width=\"88\" height=\"31\" /></a></div>\n</div>\n</div>\n<div id=\"content\">\n<h1>Mock objects documentation</h1>\n<a name=\"what\"></a>\n<h2>What are mock objects?</h2>\n<p>Mock objects have two roles during a test case: actor and critic.</p>\n<p>The actor behaviour is to simulate objects that are difficult to set up or time consuming to set up for a test. The classic example is a database connection. Setting up a test database at the start of each test would slow testing to a crawl and would require the installation of the database engine and test data on the test machine. If we can simulate the connection and return data of our choosing we not only win on the pragmatics of testing, but can also feed our code spurious data to see how it responds. We can simulate databases being down or other extremes without having to create a broken database for real. In other words, we get greater control of the test environment.</p>\n<p>If mock objects only behaved as actors they would simply be known as server stubs. This was originally a pattern named by Robert Binder (Testing object-oriented systems: models, patterns, and tools, Addison-Wesley) in 1999.</p>\n<p>A server stub is a simulation of an object or component. It should exactly replace a component in a system for test or prototyping purposes, but remain lightweight. This allows tests to run more quickly, or if the simulated class has not been written, to run at all.</p>\n<p>However, the mock objects not only play a part (by supplying chosen return values on demand) they are also sensitive to the messages sent to them (via expectations). By setting expected parameters for a method call they act as a guard that the calls upon them are made correctly. If expectations are not met they save us the effort of writing a failed test assertion by performing that duty on our behalf.</p>\n<p>In the case of an imaginary database connection they can test that the query, say SQL, was correctly formed by the object that is using the connection. Set them up with fairly tight expectations and you will hardly need manual assertions at all.</p>\n<a name=\"creation\"></a>\n<h2>Creating mock objects</h2>\n<p>In the same way that we create server stubs, all we need is an existing class, say a database connection that looks like this...</p>\n<pre><strong>class DatabaseConnection {\n    function DatabaseConnection() {\n    }\n    \n    function query() {\n    }\n    \n    function selectQuery() {\n    }\n}</strong>\n</pre>\n<p>The class does not need to have been implemented yet. To create a mock version of the class we need to include the mock object library and run the generator...</p>\n<pre><strong>require_once(\'simpletest/unit_tester.php\');\nrequire_once(\'simpletest/mock_objects.php\');\nrequire_once(\'database_connection.php\');\n\nMock::generate(\'DatabaseConnection\');</strong>\n</pre>\n<p>This generates a clone class called&nbsp;<code>MockDatabaseConnection</code>. We can now create instances of the new class within our test case...</p>\n<pre>require_once(\'simpletest/unit_tester.php\');\nrequire_once(\'simpletest/mock_objects.php\');\nrequire_once(\'database_connection.php\');\n\nMock::generate(\'DatabaseConnection\');\n<strong>\nclass MyTestCase extends UnitTestCase {\n    \n    function testSomething() {\n        $connection = &amp;new MockDatabaseConnection();\n    }\n}</strong>\n</pre>\n<p>Unlike the generated stubs the mock constructor needs a reference to the test case so that it can dispatch passes and failures while checking its expectations. This means that mock objects can only be used within test cases. Despite this their extra power means that stubs are hardly ever used if mocks are available.</p>\n<p><a name=\"stub\"></a></p>\n<p>The mock version of a class has all the methods of the original, so that operations like&nbsp;<code>query()]]&gt;</code>&nbsp;are still legal. The return value will be&nbsp;<code>null</code>, but we can change that with...</p>\n<pre><strong>$connection-&amp;gt;setReturnValue(\'query\', 37)</strong>\n</pre>\n<p>Now every time we call&nbsp;<code>query()]]&gt;</code>&nbsp;we get the result of 37. We can set the return value to anything, say a hash of imaginary database results or a list of persistent objects. Parameters are irrelevant here, we always get the same values back each time once they have been set up this way. That may not sound like a convincing replica of a database connection, but for the half a dozen lines of a test method it is usually all you need.</p>\n<p>We can also add extra methods to the mock when generating it and choose our own class name...</p>\n<pre><strong>Mock::generate(\'DatabaseConnection\', \'MyMockDatabaseConnection\', array(\'setOptions\'));</strong>\n</pre>\n<p>Here the mock will behave as if the&nbsp;<code>setOptions()</code>&nbsp;existed in the original class. This is handy if a class has used the PHP&nbsp;<code>overload()</code>mechanism to add dynamic methods. You can create a special mock to simulate this situation.</p>\n<p>Things aren\'t always that simple though. One common problem is iterators, where constantly returning the same value could cause an endless loop in the object being tested. For these we need to set up sequences of values. Let\'s say we have a simple iterator that looks like this...</p>\n<pre>class Iterator {\n    function Iterator() {\n    }\n    \n    function next() {\n    }\n}\n</pre>\n<p>This is about the simplest iterator you could have. Assuming that this iterator only returns text until it reaches the end, when it returns false, we can simulate it with...</p>\n<pre>Mock::generate(\'Iterator\');\n\nclass IteratorTest extends UnitTestCase() {\n    \n    function testASequence() {<strong>\n        $iterator = &amp;new MockIterator();\n        $iterator-&amp;gt;setReturnValue(\'next\', false);\n        $iterator-&amp;gt;setReturnValueAt(0, \'next\', \'First string\');\n        $iterator-&amp;gt;setReturnValueAt(1, \'next\', \'Second string\');</strong>\n        ...\n    }\n}\n</pre>\n<p>When&nbsp;<code>next()</code>&nbsp;is called on the mock iterator it will first return \"First string\", on the second call \"Second string\" will be returned and on any other call&nbsp;<code>false</code>&nbsp;will be returned. The sequenced return values take precedence over the constant return value. The constant one is a kind of default if you like.</p>\n<p>Another tricky situation is an overloaded&nbsp;<code>get()</code>&nbsp;operation. An example of this is an information holder with name/value pairs. Say we have a configuration class like...</p>\n<pre>class Configuration {\n    function Configuration() {\n    }\n    \n    function getValue($key) {\n    }\n}\n</pre>\n<p>This is a classic situation for using mock objects as actual configuration will vary from machine to machine, hardly helping the reliability of our tests if we use it directly. The problem though is that all the data comes through the&nbsp;<code>getValue()</code>&nbsp;method and yet we want different results for different keys. Luckily the mocks have a filter system...</p>\n<pre><strong>$config = &amp;new MockConfiguration();\n$config-&amp;gt;setReturnValue(\'getValue\', \'primary\', array(\'db_host\'));\n$config-&amp;gt;setReturnValue(\'getValue\', \'admin\', array(\'db_user\'));\n$config-&amp;gt;setReturnValue(\'getValue\', \'secret\', array(\'db_password\'));</strong>\n</pre>\n<p>The extra parameter is a list of arguments to attempt to match. In this case we are trying to match only one argument which is the look up key. Now when the mock object has the&nbsp;<code>getValue()</code>&nbsp;method invoked like this...</p>\n<pre>$config-&amp;gt;getValue(\'db_user\')\n</pre>\n<p>...it will return \"admin\". It finds this by attempting to match the calling arguments to its list of returns one after another until a complete match is found.</p>\n<p>You can set a default argument argument like so...</p>\n<pre><strong>$config-&amp;gt;setReturnValue(\'getValue\', false, array(\'*\'));</strong>\n</pre>\n<p>This is not the same as setting the return value without any argument requirements like this...</p>\n<pre><strong>$config-&amp;gt;setReturnValue(\'getValue\', false);</strong>\n</pre>\n<p>In the first case it will accept any single argument, but exactly one is required. In the second case any number of arguments will do and it acts as a catchall after all other matches. Note that if we add further single parameter options after the wildcard in the first case, they will be ignored as the wildcard will match first. With complex parameter lists the ordering could be important or else desired matches could be masked by earlier wildcard ones. Declare the most specific matches first if you are not sure.</p>\n<p>There are times when you want a specific object to be dished out by the mock rather than a copy. The PHP4 copy semantics force us to use a different method for this. You might be simulating a container for example...</p>\n<pre>class Thing {\n}\n\nclass Vector {\n    function Vector() {\n    }\n    \n    function get($index) {\n    }\n}\n</pre>\n<p>In this case you can set a reference into the mock\'s return list...</p>\n<pre>$thing = &amp;new Thing();<strong>\n$vector = &amp;new MockVector();\n$vector-&amp;gt;setReturnReference(\'get\', $thing, array(12));</strong>\n</pre>\n<p>With this arrangement you know that every time&nbsp;<code>get(12)]]&gt;</code>&nbsp;is called it will return the same&nbsp;<code>$thing</code>&nbsp;each time. This is compatible with PHP5 as well.</p>\n<p>These three factors, timing, parameters and whether to copy, can be combined orthogonally. For example...</p>\n<pre>$complex = &amp;new MockComplexThing();\n$stuff = &amp;new Stuff();<strong>\n$complex-&amp;gt;setReturnReferenceAt(3, \'get\', $stuff, array(\'*\', 1));</strong>\n</pre>\n<p>This will return the&nbsp;<code>$stuff</code>&nbsp;only on the third call and only if two parameters were set the second of which must be the integer 1. That should cover most simple prototyping situations.</p>\n<p>A final tricky case is one object creating another, known as a factory pattern. Suppose that on a successful query to our imaginary database, a result set is returned as an iterator with each call to<code>next()</code>&nbsp;giving one row until false. This sounds like a simulation nightmare, but in fact it can all be mocked using the mechanics above.</p>\n<p>Here\'s how...</p>\n<pre>Mock::generate(\'DatabaseConnection\');\nMock::generate(\'ResultIterator\');\n\nclass DatabaseTest extends UnitTestCase {\n    \n    function testUserFinder() {<strong>\n        $result = &amp;new MockResultIterator();\n        $result-&amp;gt;setReturnValue(\'next\', false);\n        $result-&amp;gt;setReturnValueAt(0, \'next\', array(1, \'tom\'));\n        $result-&amp;gt;setReturnValueAt(1, \'next\', array(3, \'dick\'));\n        $result-&amp;gt;setReturnValueAt(2, \'next\', array(6, \'harry\'));\n        \n        $connection = &amp;new MockDatabaseConnection();\n        $connection-&amp;gt;setReturnValue(\'query\', false);\n        $connection-&amp;gt;setReturnReference(\n                \'query\',\n                $result,\n                array(\'select id, name from users\'));</strong>\n                \n        $finder = &amp;new UserFinder($connection);\n        $this-&amp;gt;assertIdentical(\n                $finder-&amp;gt;findNames(),\n                array(\'tom\', \'dick\', \'harry\'));\n    }\n}\n</pre>\n<p>Now only if our&nbsp;<code>$connection</code>&nbsp;is called with the correct&nbsp;<code>query()</code>&nbsp;will the&nbsp;<code>$result</code>&nbsp;be returned that is itself exhausted after the third call to<code>next()</code>. This should be enough information for our&nbsp;<code>UserFinder</code>&nbsp;class, the class actually being tested here, to come up with goods. A very precise test and not a real database in sight.</p>\n<a name=\"expectations\"></a>\n<h2>Mocks as critics</h2>\n<p>Although the server stubs approach insulates your tests from real world disruption, it is only half the benefit. You can have the class under test receiving the required messages, but is your new class sending correct ones? Testing this can get messy without a mock objects library.</p>\n<p>By way of example, suppose we have a&nbsp;<code>SessionPool</code>&nbsp;class that we want to add logging to. Rather than grow the original class into something more complicated, we want to add this behaviour with a decorator (GOF). The&nbsp;<code>SessionPool</code>&nbsp;code currently looks like this...</p>\n<pre><strong>class SessionPool {\n    function SessionPool() {\n        ...\n    }\n    \n    function &amp;findSession($cookie) {\n        ...\n    }\n    ...\n}\n\nclass Session {\n    ...\n}</strong>\n</pre>\n<p>While our logging code looks like this...</p>\n<pre><strong>class Log {\n    function Log() {\n        ...\n    }\n    \n    function message() {\n        ...\n    }\n}\n\nclass LoggingSessionPool {\n    function LoggingSessionPool(&amp;$session_pool, &amp;$log) {\n        ...\n    }\n    \n    function &amp;findSession($cookie) {\n        ...\n    }\n    ...\n}</strong>\n</pre>\n<p>Out of all of this, the only class we want to test here is the<code>LoggingSessionPool</code>. In particular we would like to check that the<code>findSession()</code>&nbsp;method is called with the correct session ID in the cookie and that it sent the message \"Starting session $cookie\" to the logger.</p>\n<p>Despite the fact that we are testing only a few lines of production code, here is what we would have to do in a conventional test case:</p>\n<ol>\n<li>Create a log object.</li>\n<li>Set a directory to place the log file.</li>\n<li>Set the directory permissions so we can write the log.</li>\n<li>Create a&nbsp;<code>SessionPool</code>&nbsp;object.</li>\n<li>Hand start a session, which probably does lot\'s of things.</li>\n<li>Invoke&nbsp;<code>findSession()</code>.</li>\n<li>Read the new Session ID (hope there is an accessor!).</li>\n<li>Raise a test assertion to confirm that the ID matches the cookie.</li>\n<li>Read the last line of the log file.</li>\n<li>Pattern match out the extra logging timestamps, etc.</li>\n<li>Assert that the session message is contained in the text.</li>\n</ol>It is hardly surprising that developers hate writing tests when they are this much drudgery. To make things worse, every time the logging format changes or the method of creating new sessions changes, we have to rewrite parts of this test even though this test does not officially test those parts of the system. We are creating headaches for the writers of these other classes.\n<p>&nbsp;</p>\n<p>Instead, here is the complete test method using mock object magic...</p>\n<pre>Mock::generate(\'Session\');\nMock::generate(\'SessionPool\');\nMock::generate(\'Log\');\n\nclass LoggingSessionPoolTest extends UnitTestCase {\n    ...\n    function testFindSessionLogging() {<strong>\n        $session = &amp;new MockSession();\n        $pool = &amp;new MockSessionPool();\n        $pool-&amp;gt;setReturnReference(\'findSession\', $session);\n        $pool-&amp;gt;expectOnce(\'findSession\', array(\'abc\'));\n        \n        $log = &amp;new MockLog();\n        $log-&amp;gt;expectOnce(\'message\', array(\'Starting session abc\'));\n        \n        $logging_pool = &amp;new LoggingSessionPool($pool, $log);\n        $this-&amp;gt;assertReference($logging_pool-&amp;gt;findSession(\'abc\'), $session);</strong>\n    }\n}\n</pre>\n<p>We start by creating a dummy session. We don\'t have to be too fussy about this as the check for which session we want is done elsewhere. We only need to check that it was the same one that came from the session pool.</p>\n<p><code>findSession()</code>&nbsp;is a factory method the simulation of which is described&nbsp;<a href=\"http://simpletest.org/en/mock_objects_documentation.html#stub\">above</a>. The point of departure comes with the first<code>expectOnce()</code>&nbsp;call. This line states that whenever&nbsp;<code>findSession()</code>&nbsp;is invoked on the mock, it will test the incoming arguments. If it receives the single argument of a string \"abc\" then a test pass is sent to the unit tester, otherwise a fail is generated. This was the part where we checked that the right session was asked for. The argument list follows the same format as the one for setting return values. You can have wildcards and sequences and the order of evaluation is the same.</p>\n<p>We use the same pattern to set up the mock logger. We tell it that it should have&nbsp;<code>message()</code>&nbsp;invoked once only with the argument \"Starting session abc\". By testing the calling arguments, rather than the logger output, we insulate the test from any display changes in the logger.</p>\n<p>We start to run our tests when we create the new<code>LoggingSessionPool</code>&nbsp;and feed it our preset mock objects. Everything is now under our control.</p>\n<p>This is still quite a bit of test code, but the code is very strict. If it still seems rather daunting there is a lot less of it than if we tried this without mocks and this particular test, interactions rather than output, is always more work to set up. More often you will be testing more complex situations without needing this level or precision. Also some of this can be refactored into a test case<code>setUp()</code>&nbsp;method.</p>\n<p>Here is the full list of expectations you can set on a mock object in<a href=\"http://www.lastcraft.com/simple_test.php\">SimpleTest</a>...</p>\n<table border=\"0\">\n<thead>\n<tr>\n<th>Expectation</th><th>Needs&nbsp;<code>tally()</code></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>expect($method, $args)</code></td>\n<td>No</td>\n</tr>\n<tr>\n<td><code>expectAt($timing, $method, $args)</code></td>\n<td>No</td>\n</tr>\n<tr>\n<td><code>expectCallCount($method, $count)</code></td>\n<td>Yes</td>\n</tr>\n<tr>\n<td><code>expectMaximumCallCount($method, $count)</code></td>\n<td>No</td>\n</tr>\n<tr>\n<td><code>expectMinimumCallCount($method, $count)</code></td>\n<td>Yes</td>\n</tr>\n<tr>\n<td><code>expectNever($method)</code></td>\n<td>No</td>\n</tr>\n<tr>\n<td><code>expectOnce($method, $args)</code></td>\n<td>Yes</td>\n</tr>\n<tr>\n<td><code>expectAtLeastOnce($method, $args)</code></td>\n<td>Yes</td>\n</tr>\n</tbody>\n</table>\nWhere the parameters are...<dl><dt class=\"new_code\">$method</dt><dd>The method name, as a string, to apply the condition to.</dd><dt class=\"new_code\">$args</dt><dd>The arguments as a list. Wildcards can be included in the same manner as for&nbsp;<code>setReturn()</code>. This argument is optional for&nbsp;<code>expectOnce()</code>&nbsp;and<code>expectAtLeastOnce()</code>.</dd><dt class=\"new_code\">$timing</dt><dd>The only point in time to test the condition. The first call starts at zero.</dd><dt class=\"new_code\">$count</dt><dd>The number of calls expected.</dd></dl>The method&nbsp;<code>expectMaximumCallCount()</code>&nbsp;is slightly different in that it will only ever generate a failure. It is silent if the limit is never reached.\n<p>&nbsp;</p>\n<p>Also if you have juste one call in your test, make sure you\'re using<code>expectOnce</code>.<br />Using&nbsp;<code>$mocked-&gt;expectAt(0, \'method\', \'args);</code>&nbsp;on its own will not be catched : checking the arguments and the overall call count are currently independant.</p>\n<p>Like the assertions within test cases, all of the expectations can take a message override as an extra parameter. Also the original failure message can be embedded in the output as \"%s\".</p>\n<a name=\"approaches\"></a>\n<h2>Other approaches</h2>\n<p>There are three approaches to creating mocks including the one that SimpleTest employs. Coding them by hand using a base class, generating them to a file and dynamically generating them on the fly.</p>\n<p>Mock objects generated with&nbsp;<a>SimpleTest</a>&nbsp;are dynamic. They are created at run time in memory, using&nbsp;<code>eval()</code>, rather than written out to a file. This makes the mocks easy to create, a one liner, especially compared with hand crafting them in a parallel class hierarchy. The problem is that the behaviour is usually set up in the tests themselves. If the original objects change the mock versions that the tests rely on can get out of sync. This can happen with the parallel hierarchy approach as well, but is far more quickly detected.</p>\n<p>The solution, of course, is to add some real integration tests. You don\'t need very many and the convenience gained from the mocks more than outweighs the small amount of extra testing. You cannot trust code that was only tested with mocks.</p>\n<p>If you are still determined to build static libraries of mocks because you want to simulate very specific behaviour, you can achieve the same effect using the SimpleTest class generator. In your library file, say&nbsp;<em>mocks/connection.php</em>&nbsp;for a database connection, create a mock and inherit to override special methods or add presets...</p>\n</div>\n<p>&nbsp;</p>',0,'',NULL,'2008-09-09 21:06:00','2008-10-25 09:47:30',0),(29,'safari','safari',NULL,0,NULL,NULL,'2008-09-09 21:06:49','2008-09-09 21:06:49',1),(31,'cakephp-1-2-rc3','CakePHP 1.2 RC3','<p>Uptated to&nbsp;CakePHP 1.2 RC3</p>\n<p>yo<br />hou hou hou&nbsp;</p>',1,'',NULL,'2008-10-24 09:05:00','2008-11-02 17:23:38',0);
/*!40000 ALTER TABLE `posts` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `revisions`
--

DROP TABLE IF EXISTS `revisions`;
SET @saved_cs_client     = @@character_set_client;
SET character_set_client = utf8;
CREATE TABLE `revisions` (
  `id` int(11) NOT NULL auto_increment,
  `type` varchar(255) collate utf8_unicode_ci NOT NULL,
  `node_id` int(11) NOT NULL,
  `content` text collate utf8_unicode_ci NOT NULL,
  `revision_number` int(11) NOT NULL,
  `user_id` int(11) NOT NULL,
  `created` datetime NOT NULL,
  PRIMARY KEY  (`id`),
  KEY `type` (`type`,`node_id`)
) ENGINE=MyISAM AUTO_INCREMENT=50 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;
SET character_set_client = @saved_cs_client;

--
-- Dumping data for table `revisions`
--

LOCK TABLES `revisions` WRITE;
/*!40000 ALTER TABLE `revisions` DISABLE KEYS */;
INSERT INTO `revisions` VALUES (1,'wildpage',79,'{\"WildPage\":{\"title\":\"A page about nothing\",\"content\":\"<p>\'wf_update\' sad da as das asd<\\/p>\",\"description_meta_tag\":\"\"}}',1,1,'2008-09-21 10:00:17'),(2,'wildpage',79,'{\"WildPage\":{\"title\":\"A page about nothing ss\",\"content\":\"<p>\'wf_update\' sad da as das asd 213<\\/p>\",\"description_meta_tag\":\"\"}}',2,1,'2008-09-21 10:22:26'),(3,'wildpost',21,'{\"WildPost\":{\"title\":\"Today I\'ve build a lot\",\"content\":\"<p>It\'s<img src=\\\"\\/wildflower\\/img\\/thumb\\/Little_World-1400x1050.jpg\\/120\\/120\\/1\\\" alt=\\\"\\\" \\/> true.<img src=\\\"\\/wildflower\\/img\\/thumb\\/Fantasia-1600x1200.jpg\\/120\\/120\\/1\\\" alt=\\\"\\\" \\/><\\/p>\",\"description_meta_tag\":\"\"}}',1,1,'2008-09-21 20:22:34'),(4,'wildpost',28,'{\"WildPost\":{\"title\":\"my new post\",\"content\":\"\",\"description_meta_tag\":\"\"}}',1,1,'2008-09-21 21:33:51'),(5,'wildpost',27,'{\"WildPost\":{\"title\":\"my new post1\",\"content\":\"<p>svn st 213<\\/p>\",\"description_meta_tag\":\"\"}}',1,1,'2008-09-25 16:22:01'),(6,'wildpage',79,'{\"WildPage\":{\"title\":\"A page about nothing\",\"content\":\"<p>\'wf_update\' sad da as das asd 213<\\/p>\",\"description_meta_tag\":\"\"}}',3,1,'2008-09-26 11:09:55'),(7,'wildpage',79,'{\"WildPage\":{\"title\":\"A page about nothing\",\"content\":\"<p>\'wf_update\' sad da as das asd 213 sadsa<\\/p>\",\"description_meta_tag\":\"\"}}',4,1,'2008-09-26 11:20:48'),(8,'wildpage',79,'{\"WildPage\":{\"title\":\"A page about nothing\",\"content\":\"<p>\'wf_update\' sad da as das asd 213 sadsa sadas<\\/p>\",\"description_meta_tag\":\"\"}}',5,1,'2008-09-26 11:21:10'),(9,'wildpage',79,'{\"WildPage\":{\"title\":\"A page about nothing\",\"content\":\"<p>\'wf_update\' sad da as das asd 213 sadsa sadas asd<\\/p>\",\"description_meta_tag\":\"\"}}',6,1,'2008-09-26 11:24:31'),(10,'wildpage',79,'{\"WildPage\":{\"title\":\"A page about nothing\",\"content\":\"<p>\'wf_update\' sad da as das asd 213 sadsa sadas asd<\\/p>\\n<p>&nbsp;<\\/p>\\n<p>sadsad<\\/p>\\n<p>sad<\\/p>\",\"description_meta_tag\":\"\"}}',7,1,'2008-09-26 11:24:44'),(11,'wildpage',79,'{\"WildPage\":{\"title\":\"A page about nothing 1\",\"content\":\"<p>\'wf_update\' sad da as das asd 213 sadsa sadas asd<\\/p>\\n<p>&nbsp;<\\/p>\\n<p>sadsad<\\/p>\\n<p>sad<\\/p>\",\"description_meta_tag\":\"\"}}',8,1,'2008-09-26 11:31:05'),(12,'wildpage',79,'{\"WildPage\":{\"title\":\"A page about nothing 12\",\"content\":\"<p>\'wf_update\' sad da as das asd 213 sadsa sadas asd<\\/p>\\n<p>&nbsp;<\\/p>\\n<p>sadsad<\\/p>\\n<p>sad<\\/p>\",\"description_meta_tag\":\"\"}}',9,1,'2008-09-26 11:31:11'),(13,'wildpage',83,'{\"WildPage\":{\"title\":\"Bugs\",\"content\":\"<ul>\\n<li>Post can be viewed even if draft<\\/li>\\n<li>Add new category parent select box shows parents that should not be available<\\/li>\\n<li>When trying to edit a non existent page an SQL error is shown<\\/li>\\n<li>Public search should not search in drafts<\\/li>\\n<li>Upload::create does not fill short_name<\\/li>\\n<li>Image browser CSS rf &amp; IE7 fixing<\\/li>\\n<li>Image browser can be open multiple times and get\'s fcked up<\\/li>\\n<li>I deleted a comment an another one got deleted<\\/li>\\n<li>Preview does not render home template<\\/li>\\n<li>Deleting a comment a clicking cancel deletes the comment!<\\/li>\\n<li>When a new revision gets added by AJAX the old first one remains with link witouth a rev num.<\\/li>\\n<\\/ul>\\n<p>Opera bugs:<\\/p>\\n<ul>\\n<li>live search cancel...<\\/li>\\n<\\/ul>\\n<p>IE7:<\\/p>\\n<ul>\\n<li>sub toolbar get f*cked up on page edit screen when a write new post\\/page is used and then canceled<\\/li>\\n<\\/ul>\",\"description_meta_tag\":\"\"}}',1,1,'2008-09-26 11:33:01'),(14,'wildpost',24,'{\"WildPost\":{\"title\":\"hmm hmm\",\"content\":\"<p>sadasds<\\/p>\",\"description_meta_tag\":\"\"}}',1,1,'2008-09-26 11:37:11'),(15,'wildpost',24,'{\"WildPost\":{\"title\":\"hmm hmm\",\"content\":\"<p>sadasds sadasd<\\/p>\",\"description_meta_tag\":\"\"}}',2,1,'2008-09-26 11:37:20'),(16,'wildpost',24,'{\"WildPost\":{\"title\":\"hmm hmm\",\"content\":\"<p>sadasds sadasd asdsadsa<\\/p>\",\"description_meta_tag\":\"\"}}',3,1,'2008-09-26 11:37:23'),(17,'wildpost',24,'{\"WildPost\":{\"title\":\"hmm hmm #1\",\"content\":\"<p>sadasds<\\/p>\",\"description_meta_tag\":\"\"}}',4,1,'2008-09-26 11:37:44'),(18,'wildpost',25,'{\"WildPost\":{\"title\":\"test 123\",\"content\":\"<p><img src=\\\"\\/wildflower\\/img\\/thumb\\/vetton_ru_501.jpg\\/120\\/120\\/1\\\" alt=\\\"\\\" \\/><img src=\\\"\\/wildflower\\/img\\/thumb\\/Good_Vibrations-1440x900.jpg\\/120\\/120\\/1\\\" alt=\\\"\\\" \\/><\\/p>\\n<p>Abcdedfgh.<\\/p>\",\"description_meta_tag\":\"\"}}',1,1,'2008-09-26 11:54:53'),(19,'wildpost',26,'{\"WildPost\":{\"title\":\"lala lala la\",\"content\":\"\",\"description_meta_tag\":\"\"}}',1,1,'2008-09-26 12:05:36'),(20,'wildpost',26,'{\"WildPost\":{\"title\":\"lala lala la\",\"content\":\"<p>dsadasd<\\/p>\",\"description_meta_tag\":\"\"}}',2,1,'2008-09-26 12:06:32'),(21,'wildpost',26,'{\"WildPost\":{\"title\":\"lala lala la\",\"content\":\"<p>dsadasd<\\/p>\",\"description_meta_tag\":\"a description \\u010d\\u0161\\u013e\\u00e1\"}}',3,1,'2008-09-26 14:18:17'),(22,'wildpost',27,'{\"WildPost\":{\"title\":\"my new post1\",\"content\":\"<p>svn st 213 da<\\/p>\",\"description_meta_tag\":\"\"}}',2,1,'2008-09-27 11:05:15'),(23,'wildpost',27,'{\"WildPost\":{\"title\":\"my new post1\",\"content\":\"<p>svn st 213 da <img src=\\\"\\/wildflower\\/img\\/thumb\\/Rembrandt-Belsazar.jpg\\/333\\/444\\\" alt=\\\"\\\" \\/><\\/p>\",\"description_meta_tag\":\"\"}}',3,1,'2008-09-27 11:05:46'),(24,'wildpage',166,'{\"WildPage\":{\"title\":\"Hey Joe\"}}',1,1,'2008-10-04 00:56:34'),(25,'wildpage',116,'{\"WildPage\":{\"title\":\"TODO, Enhancements\",\"content\":\"<ul>\\r\\n<li>Add keyboard shortcuts - like alt-A go to index...etc.<br \\/><\\/li>\\r\\n<li>Google sitemaps generation<\\/li>\\r\\n<li>SWFupload<\\/li>\\r\\n<li>Password strength check from Wordpress<\\/li>\\r\\n<li>Shift click on list to select more items<\\/li>\\r\\n<li>Pages list drag and drop<\\/li>\\r\\n<li>JLM compression and caching<\\/li>\\r\\n<li>File manager folders<\\/li>\\r\\n<\\/ul>\\r\\n<p><img src=\\\"\\/wildflower\\/img\\/thumb\\/The_night_is_coming-1400x1050.jpg\\/120\\/120\\/1\\\" alt=\\\"\\\" \\/><\\/p>\",\"description_meta_tag\":\"\"}}',1,1,'2008-10-07 13:51:57'),(26,'wildpost',23,'{\"WildPost\":{\"title\":\"loool post\",\"content\":\"<p>dasdas<\\/p>\",\"description_meta_tag\":\"\"}}',1,1,'2008-10-07 15:09:23'),(27,'wildpage',165,'{\"WildPage\":{\"title\":\"child\",\"content\":\"\",\"description_meta_tag\":\"\"}}',1,1,'2008-10-07 15:12:50'),(28,'wildpost',2,'{\"WildPost\":{\"title\":\"Another new post\",\"content\":\"<p>And now we do this... 13456<\\/p>\",\"description_meta_tag\":\"\"}}',1,1,'2008-10-07 16:12:14'),(29,'wildpage',53,'{\"WildPage\":{\"title\":\"Feature tour\",\"content\":\"<h3>Ease of use<\\/h3>\\n<p>The administration interface is optimized for the ease of use. When editing a page or a post, the integrated WYSIWYG editor automatically resizes to fit the user\'s screen height.<\\/p>\\n<h3>File manager II<br \\/><\\/h3>\\n<p>Upload any file type. You can categorize your uploads using tags.<\\/p>\\n<p><img src=\\\"\\/wildflower\\/img\\/thumb\\/All_falls_down-1440x900.jpg\\/120\\/120\\/1\\\" alt=\\\"\\\" \\/><img src=\\\"\\/wildflower\\/img\\/thumb\\/Igaer-1400x1050.jpg\\/120\\/120\\/1\\\" alt=\\\"\\\" \\/><img src=\\\"\\/wildflower\\/img\\/thumb\\/All_falls_down-1440x900.jpg\\/120\\/120\\/1\\\" alt=\\\"\\\" \\/><img src=\\\"\\/wildflower\\/img\\/thumb\\/The_night_is_coming-1400x1050.jpg\\/120\\/120\\/1\\\" alt=\\\"\\\" \\/><\\/p>\\n<h3>Revisions<\\/h3>\\n<p>Every change you do to a page or a post is remembered and you can go back to it. No more lost content.<\\/p>\",\"description_meta_tag\":\"\"}}',1,1,'2008-10-08 15:00:07'),(30,'wildpage',158,'{\"WildPage\":{\"title\":\"UI facelift\",\"content\":\"<p>New graphic elements.<\\/p>\",\"description_meta_tag\":\"\"}}',1,1,'2008-10-08 20:49:39'),(31,'wildpost',31,'{\"WildPost\":{\"title\":\"CakePHP 1.2 RC3\"}}',1,0,'2008-10-24 09:05:54'),(32,'wildpost',31,'{\"WildPost\":{\"title\":\"CakePHP 1.2 RC3\",\"content\":\"<p>Uptated to&nbsp;CakePHP 1.2 RC3<\\/p>\",\"description_meta_tag\":\"\"}}',2,0,'2008-10-24 09:08:24'),(33,'wildpage',116,'{\"WildPage\":{\"title\":\"TODO, Enhancements\",\"content\":\"<ul>\\n<li>Add keyboard shortcuts - like alt-A go to index...etc.<br \\/><\\/li>\\n<li>Google sitemaps generation<\\/li>\\n<li>SWFupload<\\/li>\\n<li>Password strength check from Wordpress<\\/li>\\n<li>Shift click on list to select more items<\\/li>\\n<li>Pages list drag and drop<\\/li>\\n<li>JLM compression and caching<\\/li>\\n<li>File manager folders<\\/li>\\n<\\/ul>\\n<p><img src=\\\"\\/wildflower\\/img\\/thumb\\/The_night_is_coming-1400x1050.jpg\\/120\\/120\\/1\\\" alt=\\\"\\\" \\/><\\/p>\",\"description_meta_tag\":\"\"}}',2,0,'2008-10-24 15:56:28'),(34,'wildpage',170,'{\"WildPage\":{\"title\":\"Article 1\",\"content\":\"<p>Lorem ipsum dolor sit amer. 123. \\u010d\\u013e\\u017e+&aacute;\\u013e&scaron;&yacute;&iacute;.11_?<\\/p>\",\"description_meta_tag\":\"\"}}',1,0,'2008-10-24 16:00:52'),(35,'wildpage',170,'{\"WildPage\":{\"title\":\"Contact formular\",\"content\":\"<p>This is a contact form for you.<\\/p>\",\"description_meta_tag\":\"\"}}',2,0,'2008-10-24 16:03:42'),(36,'wildpost',32,'{\"WildPost\":{\"title\":\"999\"}}',1,0,'2008-10-24 16:10:14'),(37,'wildpage',169,'{\"WildPage\":{\"title\":\"Vrann\\u00e9 kone\",\"content\":\"<p>Lorem ipsum. Vrann&eacute; kone.<\\/p>\",\"description_meta_tag\":\"\"}}',1,0,'2008-10-24 16:12:19'),(38,'wildpost',32,'{\"WildPost\":{\"title\":\"999\",\"content\":\"<p>Numbers.<\\/p>\\n<div class=\\\"memdoc\\\">\\n<p>Loads a class, registers the object in the registry and returns instance of the object.<\\/p>\\n<p>&nbsp;<\\/p>\\n<dl><dt><strong>Parameters:<\\/strong><\\/dt><dd> \\n<table border=\\\"0\\\" cellspacing=\\\"2\\\" cellpadding=\\\"0\\\">\\n<tbody>\\n<tr>\\n<td valign=\\\"top\\\"><\\/td>\\n<td valign=\\\"top\\\"><em>mixed<\\/em>&nbsp;<\\/td>\\n<td>$class as a string or a single key =&gt; value array instance will be created, stored in the registry and returned. Required: array(\'class\' =&gt; \'ClassName\', \'alias\' =&gt; \'AliasNameStoredInTheRegistry\', \'type\' =&gt; \'TypeOfClass\'); <a class=\\\"el\\\" href=\\\"http:\\/\\/api.cakephp.org\\/1.2\\/class_model.html\\\">Model<\\/a> Classes can accept optional array(\'id\' =&gt; $id, \'table\' =&gt; $table, \'ds\' =&gt; $ds, \'alias\' =&gt; $alias); When $class is a numeric keyed array, multiple class instances will be stored in the registry, no instance of the object will be returned array( array(\'class\' =&gt; \'ClassName\', \'alias\' =&gt; \'AliasNameStoredInTheRegistry\', \'type\' =&gt; \'TypeOfClass\'), array(\'class\' =&gt; \'ClassName\', \'alias\' =&gt; \'AliasNameStoredInTheRegistry\', \'type\' =&gt; \'TypeOfClass\'), array(\'class\' =&gt; \'ClassName\', \'alias\' =&gt; \'AliasNameStoredInTheRegistry\', \'type\' =&gt; \'TypeOfClass\'));<\\/td>\\n<\\/tr>\\n<tr>\\n<td valign=\\\"top\\\"><\\/td>\\n<td valign=\\\"top\\\"><em>string<\\/em>&nbsp;<\\/td>\\n<td>$type TypeOfClass<\\/td>\\n<\\/tr>\\n<\\/tbody>\\n<\\/table>\\n<\\/dd><\\/dl> <dl class=\\\"return\\\"><dt><strong>Returns:<\\/strong><\\/dt><dd>object intance of ClassName <\\/dd><\\/dl>\\n<p>Definition at line <a class=\\\"el\\\" href=\\\"http:\\/\\/api.cakephp.org\\/1.2\\/class__registry_8php-source.html#l00083\\\">83<\\/a> of file <a class=\\\"el\\\" href=\\\"http:\\/\\/api.cakephp.org\\/1.2\\/class__registry_8php-source.html\\\">class_registry.php<\\/a>.<\\/p>\\n<p>References <a class=\\\"el\\\" href=\\\"http:\\/\\/api.cakephp.org\\/1.2\\/class__registry_8php-source.html#l00247\\\">_duplicate()<\\/a>, <a class=\\\"el\\\" href=\\\"http:\\/\\/api.cakephp.org\\/1.2\\/basics_8php-source.html#l00225\\\">a()<\\/a>, <a class=\\\"el\\\" href=\\\"http:\\/\\/api.cakephp.org\\/1.2\\/class__registry_8php-source.html#l00060\\\">getInstance()<\\/a>, and <a class=\\\"el\\\" href=\\\"http:\\/\\/api.cakephp.org\\/1.2\\/configure_8php-source.html#l00761\\\">App::import()<\\/a>.<\\/p>\\n<p>Referenced by <a class=\\\"el\\\" href=\\\"http:\\/\\/api.cakephp.org\\/1.2\\/shell_8php-source.html#l00213\\\">Shell::_loadModels()<\\/a>, <a class=\\\"el\\\" href=\\\"http:\\/\\/api.cakephp.org\\/1.2\\/auth_8php-source.html#l00689\\\">AuthComponent::getModel()<\\/a>, <a class=\\\"el\\\" href=\\\"http:\\/\\/api.cakephp.org\\/1.2\\/libs_2controller_2controller_8php-source.html#l00418\\\">Controller::loadModel()<\\/a>, <a class=\\\"el\\\" href=\\\"http:\\/\\/api.cakephp.org\\/1.2\\/cake_2libs_2model_2db__acl_8php-source.html#l00078\\\">AclNode::node()<\\/a>, <a class=\\\"el\\\" href=\\\"http:\\/\\/api.cakephp.org\\/1.2\\/libs_2model_2schema_8php-source.html#l00175\\\">CakeSchema::read()<\\/a>, and <a class=\\\"el\\\" href=\\\"http:\\/\\/api.cakephp.org\\/1.2\\/translate_8php-source.html#l00316\\\">TranslateBehavior::translateModel()<\\/a>.<\\/p>\\n<\\/div>\",\"description_meta_tag\":\"\"}}',2,0,'2008-10-25 08:32:20'),(39,'wildpage',52,'{\"WildPage\":{\"title\":\"Home & Features\",\"content\":\"<ul id=\\\"home-feature-list\\\">\\n<li id=\\\"feature-cake\\\">Content management system and application platform build on <a href=\\\"http:\\/\\/www.cakephp.org\\\">CakePHP<\\/a> framework and <a href=\\\"http:\\/\\/jquery.com\\\">jQuery<\\/a> Javascript library.<\\/li>\\n<li id=\\\"feature-standards\\\">Standards based.<\\/li>\\n<li id=\\\"feature-open-source\\\">Open source.<\\/li>\\n<li>User friendly.<\\/li>\\n<li>Unit test coverage.<\\/li>\\n<li>It\'s a CakePHP plugin. Use with any existing CakePHP 1.2 application.<\\/li>\\n<li>Requires up-to-date LAMP stacks. PHP 5.2+, MySQL 4.1+, mod_rewrite.<\\/li>\\n<li><a href=\\\"\\/feature-tour\\\">More features<\\/a><\\/li>\\n<\\/ul>\\n<p class=\\\"download\\\"><a href=\\\"http:\\/\\/wildflower.googlecode.com\\/files\\/wildflower10a.zip\\\"><strong>Download now<\\/strong><br \\/> Wildflower 1.0a, released 29th February 2008<\\/a><\\/p>\",\"description_meta_tag\":\"Content management system and application platform build on CakePHP framework and jQuery Javascript library.\"}}',1,0,'2008-10-25 08:34:59'),(40,'wildpage',52,'{\"WildPage\":{\"title\":\"Home & Features\",\"content\":\"<ul id=\\\"home-feature-list\\\">\\n<li id=\\\"feature-cake\\\">Content management system and application platform build on <a href=\\\"http:\\/\\/www.cakephp.org\\\">CakePHP<\\/a> framework and <a href=\\\"http:\\/\\/jquery.com\\\">jQuery<\\/a> Javascript library.<\\/li>\\n<li id=\\\"feature-standards\\\">Standards based.<\\/li>\\n<li id=\\\"feature-open-source\\\">Open source.<\\/li>\\n<li>User friendly.<\\/li>\\n<li>Unit test coverage.<\\/li>\\n<li>It\'s a CakePHP plugin. Use with any existing CakePHP 1.2 application.<\\/li>\\n<li><a href=\\\"\\/feature-tour\\\">More features<\\/a><\\/li>\\n<\\/ul>\\n<p class=\\\"download\\\"><a href=\\\"http:\\/\\/wildflower.googlecode.com\\/files\\/wildflower10a.zip\\\"><strong>Download now<\\/strong><br \\/> Wildflower 1.0a, released 29th February 2008<\\/a><\\/p>\",\"description_meta_tag\":\"Content management system and application platform build on CakePHP framework and jQuery Javascript library.\"}}',2,0,'2008-10-25 08:35:26'),(41,'wildpage',54,'{\"WildPage\":{\"title\":\"Documentation\",\"content\":\"<p><em>This section is slowly being filled up. Please be patient.<\\/em><\\/p>\\n<h3>Who is it for?<\\/h3>\\n<p>Everyone who is able to deploy Wordpress should be able to get Wildflower up and running. However to fully enjoy and benefit from the features of this CMS, you should be competent in these areas (or willing to learn):<\\/p>\\n<ul>\\n<li>Code separation. Understand the difference between view and bussiness logic.<\\/li>\\n<li>RESTful architecture.<\\/li>\\n<li>Unit testing.<\\/li>\\n<li>The heart of Wildflower is the CakePHP framework.<\\/li>\\n<\\/ul>\\n<p>This means this system is not so much for a typical PHP hacker, but for an agile programmer that is willing to learn and adopt the best practices. We also want to have fun along the way, so the idea of the system is not to stand in your way.<\\/p>\\n<h3>Requirements<\\/h3>\\n<ul>\\n<li>Apache web server with mod_rewrite<\\/li>\\n<li>PHP 5.2+<\\/li>\\n<li>MySQL 4.1+<\\/li>\\n<li>If you want to use the <a href=\\\"http:\\/\\/code.google.com\\/p\\/ruckusing\\/\\\">Ruckusing database migrations<\\/a> you need PEAR\'s MDB2 and Log packages<\\/li>\\n<\\/ul>\\n<h3>Fresh installation<\\/h3>\\n<ol>\\n<li>Extract the archive. Place the <em>wildflower<\\/em> directory inside your web servers documents folder.<\\/li>\\n<li>Create a new MySQL database (<em>utf8_unicode_ci<\\/em> collation is strongly recommented) and into this new database import the SQL file <span style=\\\"font-style: italic;\\\">app<\\/span><em>\\/config\\/sql\\/wildflower.sql<\\/em>.<\\/li>\\n<li>Edit the <em>app\\/config\\/database.php<\\/em> file with your database connection details.<\\/li>\\n<li>You\'ve got a working copy of this site. You can start working on your project by modifying the application inside the <em>app<\\/em> directory. When a new release of Wildflower comes, you simply replace the <em>cake<\\/em>, <em>vendors<\\/em> and <em>wildflower<\\/em> directories.<\\/li>\\n<li>Access the admin area at <em>\\/admin<\\/em>. The initial login\\/password combination is <strong>admin<\\/strong>\\/<strong>admin321<\\/strong>.<\\/li>\\n<\\/ol>\\n<h3>Installing to an existing CakePHP application<\\/h3>\\n<ol>\\n<li>Extract the archive and place the <em>wildflower\\/wildflower<\\/em> directory inside your application root.<\\/li>\\n<li>Just include the Wildflower <em>bootstrap.php<\\/em> file located at <em>\\/wildflower\\/config\\/bootstrap.php<\\/em> in your <em>\\/app\\/config\\/bootstrap.php<\\/em>.<\\/li>\\n<li>Load the SQL dump file <em>app\\/config\\/sql\\/wildflower.sql<\\/em>&nbsp;into your database.<\\/li>\\n<li>Set up some routes. Check the <em>wildflower\\/config\\/routes.php<\\/em> file for the default WF routes.<\\/li>\\n<li>Your app_controller, app_model and app_helper files should extend WildflowerController, WildflowerModel and WildflowerHelper.<\\/li>\\n<li>Copy <em>app\\/webroot\\/css\\/wfadmin<\\/em> from the archive to your <em>app\\/webroot\\/css<\\/em>.<\\/li>\\n<\\/ol>\\n<h3>Basic principles<\\/h3>\\n<p>A modern website usually consist of \\\"static\\\" pages, news or blog sections, contact form, provides RSS feeds and a number of features, specific to the site\'s aim or goal. The idea of Wildflower is to provide this common functionality, with a polished and user friendly interface and enable the programmer to effectively code the remaining specific features of the site, fully exploiting the PHP rapid development framework--CakePHP.<\\/p>\\n<p>Wildflower uses the additional MVC paths feature of the CakePHP framework. It sits in it\'s own directory inside the application root. This allows the user to create application specific controllers, models or views in her <em>\\/app<\\/em> directory. By mirroring any view file from the wildflower\\/views folder inside app\\/views you can override the default Wildflower files. This is a great way to customize any aspect of the CMS, especially extending the admin interface with additional sections or customizing existing ones to the site\'s needs without touching the original Wildflower code.<\\/p>\\n<h3>A real world example of building a site with some custom functionality<\\/h3>\\n<p>Imagine you want to build a simple site with the following requirements:<\\/p>\\n<ul>\\n<li>Content managed \\\"static\\\" pages<\\/li>\\n<li>Contact form<\\/li>\\n<li>Home page with four boxes with different content and each content managed<\\/li>\\n<\\/ul>\\n<p>The first two requirements you\'ve got out of the box. For the third one we\'ll create a new section in the admin interface and build our own model\\/view\\/controller that will handle the custom functionality.<\\/p>\\n<h4>Step 1: Create a new database table<\\/h4>\\n<p>Let\'s create a very basic table to hold our data.<\\/p>\\n<p><code>CREATE TABLE home_page_boxes (<br \\/> &nbsp; id int(11) unsigned NOT NULL auto_increment,<br \\/> &nbsp; content text,<br \\/> &nbsp; PRIMARY KEY&nbsp; (id)<br \\/> );<\\/code><\\/p>\\n<p>We\'ll be using 4 table rows to represent our boxes. Insert those right away:<\\/p>\\n<p><code>INSERT INTO home_page_boxes (id, content) VALUES(1, \'Box 1 content.\');<br \\/> INSERT INTO home_page_boxes (id, content) VALUES(2, \'Box 2 content.\');<br \\/> INSERT INTO home_page_boxes (id, content) VALUES(3, \'Box 3 content.\');<br \\/> INSERT INTO home_page_boxes (id, content) VALUES(4, \'Box 4 content.\');<\\/code><\\/p>\\n<h4>Step 2: Create the MVC files<\\/h4>\\n<p>For this simple example we actually don\'t need to create any model file, since CakePHP supports <a href=\\\"http:\\/\\/www.littlehart.net\\/atthekeyboard\\/2008\\/08\\/05\\/dynamic-models-in-cakephp-12\\/\\\">dynamic models<\\/a>. So let\'s create our controller. We\'ll create a file in <em>app\\/controllers\\/<\\/em> called <em>home_page_boxes_controller.php<\\/em> and put some code into it:<\\/p>\\n<pre>&lt;?php\\nclass HomePageBoxesController extends AppController {\\n&nbsp;&nbsp;&nbsp; \\n&nbsp;&nbsp;&nbsp; function beforeFilter() {\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; parent::beforeFilter();\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $this-&gt;pageTitle = \'Home\';\\n&nbsp;&nbsp;&nbsp; }\\n\\n&nbsp;&nbsp;&nbsp; function admin_index() {\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $boxes = $this-&gt;HomePageBox-&gt;find(\'all\', \'id IN (1, 2, 3, 4)\');\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $this-&gt;set(compact(\'boxes\'));\\n&nbsp;&nbsp;&nbsp; }\\n&nbsp;&nbsp;&nbsp; \\n&nbsp;&nbsp;&nbsp; function admin_update() {\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; foreach ($this-&gt;data[\'HomePageBox\'] as $name =&gt; $content) {\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $id = explode(\'-\', $name);\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $id = intval(array_pop($id));\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $data[\'HomePageBox\'] = array(\'id\' =&gt; $id, \'content\' =&gt; $content);\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $this-&gt;HomePageBox-&gt;create($data);\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $this-&gt;HomePageBox-&gt;save(); \\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $this-&gt;redirect(array(\'action\' =&gt; \'index\'));\\n&nbsp;&nbsp;&nbsp; }\\n&nbsp;&nbsp;&nbsp; \\n&nbsp;&nbsp;&nbsp; function index() {\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $boxes = $this-&gt;HomePageBox-&gt;find(\'all\', \'id IN (1, 2, 3, 4)\');\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $this-&gt;set(compact(\'boxes\'));\\n&nbsp;&nbsp;&nbsp; }\\n&nbsp;&nbsp;&nbsp; \\n}\\n<\\/pre>\\n<p>This code handles populating the the homepage and the admin section with data and updating (saving) new content in the admin section. Let\'s create the view files. Create a new folder called <em>home_page_boxes<\\/em> under <em>app\\/views\\/<\\/em> . Under this folder add <em>admin_index.ctp<\\/em> and <em>index.ctp<\\/em> files.<\\/p>\\n<p><em>admin_index.ctp<\\/em> could look like this:<\\/p>\\n<pre>&lt;h2&gt;Homepage Boxes&lt;\\/h2&gt;\\n\\n&lt;?php\\n    echo $form-&gt;create(\'HomePageBox\', array(\'action\' =&gt; \'update\'));\\n    \\n    for ($i = 0; $i &lt; 4; $i++) {\\n        echo \\n        $form-&gt;input(\\\"content-{$boxes[$i][\'HomePageBox\'][\'id\']}\\\", \\n            array(\'type\' =&gt; \'textbox\', \\n                    \'value\' =&gt; $boxes[$i][\'HomePageBox\'][\'content\'], \\n                    \'label\' =&gt; \'Box \' . ($i + 1), \'between\' =&gt; \'&lt;br \\/&gt;\', \'class\' =&gt; \'box-fck\')),\\n        $form-&gt;submit(\'Save\');\\n    }\\n    \\n    echo $form-&gt;end();\\n?&gt;\\n<\\/pre>\\n<p>This will create an admin page with four TinyMCE editors each handling one box. Let\'s take a look at the <em>index.ctp<\\/em> file:<\\/p>\\n<pre>&lt;?php foreach ($boxes as $box) { ?&gt;\\n\\n&lt;div class=\\\"home-box\\\"&gt;\\n    &lt;?php echo $box[\'HomePageBox\'][\'content\'] ?&gt;\\n&lt;\\/div&gt;\\n\\n&lt;?php } ?&gt;\\n<\\/pre>\\n<p>This will display the four boxes and their content.<\\/p>\\n<p>Now <strong>copy<\\/strong> the <em>\\/wildflower\\/views\\/layout\\/admin_default.ctp<\\/em> to <em>\\/app\\/views\\/layouts\\/<\\/em> . There you can modify the file and add a link to our new home page boxes admin screen to the admin main menu. I\'ll leave this step to you. Remember: <strong>Every Wildflower view file that you mirror inside your app\\/views will be used instead of the original<\\/strong>.<\\/p>\\n<h4>Step 3: Routes<\\/h4>\\n<p>Finally we need to let Cake know that we want to display the HomePageBoxesController::index() action when browsing to <em>your-site.com <\\/em>root. Modify the first two routes in <em>app\\/config\\/routes.php<\\/em> like this:<\\/p>\\n<pre>Router::connect(\'\\/\', array(\'controller\' =&gt; \'home_page_boxes\', \'action\' =&gt; \'index\'));\\nRouter::connect(\'\\/app\\/webroot\\/\', array(\'controller\' =&gt; \'home_page_boxes\', \'action\' =&gt; \'index\'));\\n<\\/pre>\\n<p>Maybe you\'re wondering about the second route. On some server configurations Cake incorrectly detects the site root (\\/) as <em>\\/app\\/webroot<\\/em> . This fixes it. If you don\'t experience this problem (the home page works fine without the second route) you can remove the route.<\\/p>\\n<p>As you can see, Wildflower enables you to use all the CakePHP power together with the out of the box functionality.<\\/p>\",\"description_meta_tag\":\"\"}}',1,0,'2008-10-25 09:14:45'),(42,'wildpost',2,'{\"WildPost\":{\"title\":\"Another new post\",\"content\":\"<h1 class=\\\"firstHeading\\\">Lorem ipsum<\\/h1>\\n<h3 id=\\\"siteSub\\\">From Wikipedia, the free encyclopedia<\\/h3>\\n<div id=\\\"jump-to-nav\\\">Jump to: <a href=\\\"http:\\/\\/en.wikipedia.org\\/wiki\\/Lorem_ipsum#column-one\\\">navigation<\\/a>, <a href=\\\"http:\\/\\/en.wikipedia.org\\/wiki\\/Lorem_ipsum#searchInput\\\">search<\\/a><\\/div>\\n<!-- start content --> \\n<table class=\\\"metadata plainlinks ambox ambox-content\\\" border=\\\"0\\\">\\n<tbody>\\n<tr>\\n<td class=\\\"mbox-image\\\">\\n<div style=\\\"width: 52px;\\\"><a class=\\\"image\\\" title=\\\"Question book-new.svg\\\" href=\\\"http:\\/\\/en.wikipedia.org\\/wiki\\/Image:Question_book-new.svg\\\"><img src=\\\"http:\\/\\/upload.wikimedia.org\\/wikipedia\\/en\\/thumb\\/9\\/99\\/Question_book-new.svg\\/50px-Question_book-new.svg.png\\\" border=\\\"0\\\" alt=\\\"\\\" width=\\\"50\\\" height=\\\"39\\\" \\/><\\/a><\\/div>\\n<\\/td>\\n<td class=\\\"mbox-text\\\"><strong>This article needs additional <a title=\\\"Wikipedia:Citing sources\\\" href=\\\"http:\\/\\/en.wikipedia.org\\/wiki\\/Wikipedia:Citing_sources\\\">citations<\\/a> for <a title=\\\"Wikipedia:Verifiability\\\" href=\\\"http:\\/\\/en.wikipedia.org\\/wiki\\/Wikipedia:Verifiability\\\">verification<\\/a>.<\\/strong><br \\/> <small>Please help <a class=\\\"external text\\\" title=\\\"http:\\/\\/en.wikipedia.org\\/w\\/index.php?title=Lorem_ipsum&amp;action=edit\\\" rel=\\\"nofollow\\\" href=\\\"http:\\/\\/en.wikipedia.org\\/w\\/index.php?title=Lorem_ipsum&amp;action=edit\\\">improve this article<\\/a> by adding <a title=\\\"Wikipedia:Reliable sources\\\" href=\\\"http:\\/\\/en.wikipedia.org\\/wiki\\/Wikipedia:Reliable_sources\\\">reliable references<\\/a>. Unsourced material may be <a title=\\\"Template:Fact\\\" href=\\\"http:\\/\\/en.wikipedia.org\\/wiki\\/Template:Fact\\\">challenged<\\/a> and removed. <em>(April 2008)<\\/em><\\/small><\\/td>\\n<\\/tr>\\n<\\/tbody>\\n<\\/table>\\n<dl><dd><em>For the Wikipedia template, see <a title=\\\"Template:Lorem ipsum\\\" href=\\\"http:\\/\\/en.wikipedia.org\\/wiki\\/Template:Lorem_ipsum\\\">lorem ipsum<\\/a><\\/em><\\/dd><\\/dl>\\n<div class=\\\"thumb tright\\\">\\n<div class=\\\"thumbinner\\\" style=\\\"width: 302px;\\\"><a class=\\\"image\\\" title=\\\"Using lorem ipsum to focus attention on graphic elements in a website design proposal.\\\" href=\\\"http:\\/\\/en.wikipedia.org\\/wiki\\/Image:Lorem_ipsum_design.svg\\\"><img class=\\\"thumbimage\\\" src=\\\"http:\\/\\/upload.wikimedia.org\\/wikipedia\\/commons\\/thumb\\/8\\/86\\/Lorem_ipsum_design.svg\\/300px-Lorem_ipsum_design.svg.png\\\" border=\\\"0\\\" alt=\\\"Using lorem ipsum to focus attention on graphic elements in a website design proposal.\\\" width=\\\"300\\\" height=\\\"337\\\" \\/><\\/a>\\n<div class=\\\"thumbcaption\\\">\\n<div class=\\\"magnify\\\"><a class=\\\"internal\\\" title=\\\"Enlarge\\\" href=\\\"http:\\/\\/en.wikipedia.org\\/wiki\\/Image:Lorem_ipsum_design.svg\\\"><img src=\\\"http:\\/\\/en.wikipedia.org\\/skins-1.5\\/common\\/images\\/magnify-clip.png\\\" alt=\\\"\\\" width=\\\"15\\\" height=\\\"11\\\" \\/><\\/a><\\/div>\\nUsing <em>lorem ipsum<\\/em> to focus attention on graphic elements in a website design proposal.<\\/div>\\n<\\/div>\\n<\\/div>\\n<p>In <a title=\\\"Publishing\\\" href=\\\"http:\\/\\/en.wikipedia.org\\/wiki\\/Publishing\\\">publishing<\\/a> and <a title=\\\"Graphic design\\\" href=\\\"http:\\/\\/en.wikipedia.org\\/wiki\\/Graphic_design\\\">graphic design<\\/a>, <strong>lorem ipsum<\\/strong> is common <a class=\\\"mw-redirect\\\" title=\\\"Placeholder text\\\" href=\\\"http:\\/\\/en.wikipedia.org\\/wiki\\/Placeholder_text\\\">placeholder text<\\/a> used to demonstrate the <a title=\\\"Graphics\\\" href=\\\"http:\\/\\/en.wikipedia.org\\/wiki\\/Graphics\\\">graphic<\\/a> elements of a document or visual presentation, such as <a title=\\\"Font\\\" href=\\\"http:\\/\\/en.wikipedia.org\\/wiki\\/Font\\\">font<\\/a>, <a title=\\\"Typography\\\" href=\\\"http:\\/\\/en.wikipedia.org\\/wiki\\/Typography\\\">typography<\\/a>, and <a title=\\\"Layout\\\" href=\\\"http:\\/\\/en.wikipedia.org\\/wiki\\/Layout\\\">layout<\\/a>. It is a form of \\\"<a title=\\\"Greeking\\\" href=\\\"http:\\/\\/en.wikipedia.org\\/wiki\\/Greeking\\\">greeking<\\/a>\\\".<\\/p>\\n<p>Even though using \\\"lorem ipsum\\\" often arouses curiosity due to its resemblance to classical <a title=\\\"Latin\\\" href=\\\"http:\\/\\/en.wikipedia.org\\/wiki\\/Latin\\\">Latin<\\/a>, it is not intended to have meaning. Where text is visible in a document, people tend to focus on the textual content rather than upon overall presentation, so publishers use <em>lorem ipsum<\\/em> when displaying a <a title=\\\"Typeface\\\" href=\\\"http:\\/\\/en.wikipedia.org\\/wiki\\/Typeface\\\">typeface<\\/a> or design in order to direct the focus to presentation. \\\"Lorem ipsum\\\" also approximates a typical distribution of spaces in <a title=\\\"English language\\\" href=\\\"http:\\/\\/en.wikipedia.org\\/wiki\\/English_language\\\">English<\\/a><sup class=\\\"noprint Template-Fact\\\"><span style=\\\"white-space: nowrap;\\\" title=\\\"This claim needs references to reliable sources&nbsp;since August 2008\\\">[<em><a title=\\\"Wikipedia:Citation needed\\\" href=\\\"http:\\/\\/en.wikipedia.org\\/wiki\\/Wikipedia:Citation_needed\\\">citation needed<\\/a><\\/em>]<\\/span><\\/sup>.<\\/p>\\n<p>The most common <em>lorem ipsum<\\/em> text reads as follows:<\\/p>\\n<dl><dd><em>Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.<\\/em><\\/dd><\\/dl> \\n<table id=\\\"toc\\\" class=\\\"toc\\\" border=\\\"0\\\" summary=\\\"Contents\\\">\\n<tbody>\\n<tr>\\n<td>\\n<div id=\\\"toctitle\\\">\\n<h2>Contents<\\/h2>\\n<span class=\\\"toctoggle\\\">[<a id=\\\"togglelink\\\" class=\\\"internal\\\" href=\\\"javascript:toggleToc()\\\">hide<\\/a>]<\\/span><\\/div>\\n<ul>\\n<li class=\\\"toclevel-1\\\"><a href=\\\"http:\\/\\/en.wikipedia.org\\/wiki\\/Lorem_ipsum#History_and_discovery\\\"><span class=\\\"tocnumber\\\">1<\\/span> <span class=\\\"toctext\\\">History and discovery<\\/span><\\/a><\\/li>\\n<li class=\\\"toclevel-1\\\"><a href=\\\"http:\\/\\/en.wikipedia.org\\/wiki\\/Lorem_ipsum#English_translation\\\"><span class=\\\"tocnumber\\\">2<\\/span> <span class=\\\"toctext\\\">English translation<\\/span><\\/a><\\/li>\\n<li class=\\\"toclevel-1\\\"><a href=\\\"http:\\/\\/en.wikipedia.org\\/wiki\\/Lorem_ipsum#Variations\\\"><span class=\\\"tocnumber\\\">3<\\/span> <span class=\\\"toctext\\\">Variations<\\/span><\\/a><\\/li>\\n<li class=\\\"toclevel-1\\\"><a href=\\\"http:\\/\\/en.wikipedia.org\\/wiki\\/Lorem_ipsum#See_also\\\"><span class=\\\"tocnumber\\\">4<\\/span> <span class=\\\"toctext\\\">See also<\\/span><\\/a><\\/li>\\n<li class=\\\"toclevel-1\\\"><a href=\\\"http:\\/\\/en.wikipedia.org\\/wiki\\/Lorem_ipsum#References\\\"><span class=\\\"tocnumber\\\">5<\\/span> <span class=\\\"toctext\\\">References<\\/span><\\/a><\\/li>\\n<li class=\\\"toclevel-1\\\"><a href=\\\"http:\\/\\/en.wikipedia.org\\/wiki\\/Lorem_ipsum#External_links\\\"><span class=\\\"tocnumber\\\">6<\\/span> <span class=\\\"toctext\\\">External links<\\/span><\\/a><\\/li>\\n<\\/ul>\\n<\\/td>\\n<\\/tr>\\n<\\/tbody>\\n<\\/table>\\n<p>\\n<script type=\\\"text\\/javascript\\\">\\n\\/\\/&lt;![CDATA[\\n if (window.showTocToggle) { var tocShowText = \\\"show\\\"; var tocHideText = \\\"hide\\\"; showTocToggle(); } \\n\\/\\/]]&gt;\\n<\\/script>\\n<\\/p>\\n<p><a id=\\\"History_and_discovery\\\" name=\\\"History_and_discovery\\\"><\\/a><\\/p>\\n<h2><span class=\\\"editsection\\\">[<a title=\\\"Edit section: History and discovery\\\" href=\\\"http:\\/\\/en.wikipedia.org\\/w\\/index.php?title=Lorem_ipsum&amp;action=edit&amp;section=1\\\">edit<\\/a>]<\\/span> <span class=\\\"mw-headline\\\">History and discovery<\\/span><\\/h2>\\n<p>The text is derived from <a title=\\\"Cicero\\\" href=\\\"http:\\/\\/en.wikipedia.org\\/wiki\\/Cicero\\\">Cicero<\\/a>\'s <em><a class=\\\"new\\\" title=\\\"De Finibus Bonorum et Malorum (page does not exist)\\\" href=\\\"http:\\/\\/en.wikipedia.org\\/w\\/index.php?title=De_Finibus_Bonorum_et_Malorum&amp;action=edit&amp;redlink=1\\\">De Finibus Bonorum et Malorum<\\/a><\\/em> (<em>On the Ends of Goods and Evils<\\/em>, or alternatively <em>[About] The Purposes of Good and Evil<\\/em> ).<sup id=\\\"cite_ref-Microsoft_0-0\\\" class=\\\"reference\\\"><a href=\\\"http:\\/\\/en.wikipedia.org\\/wiki\\/Lorem_ipsum#cite_note-Microsoft-0\\\">[1]<\\/a><\\/sup> The original passage began: <em>Neque porro quisquam est qui do<strong>lorem ipsum<\\/strong> quia <strong>dolor sit amet, consectetur, adipisci<\\/strong> v<strong>elit<\\/strong><\\/em> (Translation: \\\"Neither is there anyone who loves grief itself since it is grief and thus wants to obtain it\\\"). It is not known exactly when the text acquired its current standard form; it may have been as late as the 1960s. The passage was discovered by <a class=\\\"new\\\" title=\\\"Richard McClintock (page does not exist)\\\" href=\\\"http:\\/\\/en.wikipedia.org\\/w\\/index.php?title=Richard_McClintock&amp;action=edit&amp;redlink=1\\\">Richard McClintock<\\/a>, a <a title=\\\"Latin\\\" href=\\\"http:\\/\\/en.wikipedia.org\\/wiki\\/Latin\\\">Latin<\\/a> scholar who is the publications director at <a title=\\\"Hampden-Sydney College\\\" href=\\\"http:\\/\\/en.wikipedia.org\\/wiki\\/Hampden-Sydney_College\\\">Hampden-Sydney College<\\/a> in <a title=\\\"Virginia\\\" href=\\\"http:\\/\\/en.wikipedia.org\\/wiki\\/Virginia\\\">Virginia<\\/a>, by searching for citings of the rarely used word \'consectetur\' in classical literature.<\\/p>\\n<p>The original version (with the excerpted items highlighted):<\\/p>\\n<dl><dd>[32] Sed ut perspiciatis, unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam eaque ipsa, quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt, explicabo. Nemo enim ipsam voluptatem, quia voluptas sit, aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos, qui ratione voluptatem sequi nesciunt, neque porro quisquam est, qui do<strong>lorem ipsum<\\/strong>, quia <strong>dolor sit, amet, consectetur, adipisci<\\/strong> v<strong>elit, sed<\\/strong> quia non numquam <strong>eius mod<\\/strong>i <strong>tempor<\\/strong>a <strong>incidunt, ut labore et dolore magna<\\/strong>m <strong>aliqua<\\/strong>m quaerat voluptatem. <strong>Ut enim ad minim<\\/strong>a <strong>veniam, quis nostru<\\/strong>m <strong>exercitation<\\/strong>em <strong>ullam co<\\/strong>rporis suscipit <strong>labori<\\/strong>o<strong>s<\\/strong>am, <strong>nisi ut aliquid ex ea commod<\\/strong>i <strong>consequat<\\/strong>ur? <strong>Quis aute<\\/strong>m vel eum <strong>iure reprehenderit,<\\/strong> qui <strong>in<\\/strong> ea <strong>voluptate velit esse<\\/strong>, quam nihil molestiae <strong>c<\\/strong>onsequatur, vel <strong>illum<\\/strong>, qui <strong>dolore<\\/strong>m <strong>eu<\\/strong>m <strong>fugiat<\\/strong>, quo voluptas <strong>nulla pariatur<\\/strong>? [33] At vero eos et accusamus et iusto odio dignissimos ducimus, qui blanditiis praesentium voluptatum deleniti atque corrupti, quos dolores et quas molestias <strong>exceptur<\\/strong>i <strong>sint, obcaecat<\\/strong>i <strong>cupiditat<\\/strong>e <strong>non pro<\\/strong>v<strong>ident<\\/strong>, similique <strong>sunt in culpa<\\/strong>, <strong>qui officia deserunt mollit<\\/strong>ia <strong>anim<\\/strong>i, <strong>id est laborum<\\/strong> et dolorum fuga. Et harum quidem rerum facilis est et expedita distinctio. Nam libero tempore, cum soluta nobis est eligendi optio, cumque nihil impedit, quo minus id, quod maxime placeat, facere possimus, omnis voluptas assumenda est, omnis dolor repellendus. Temporibus autem quibusdam et aut officiis debitis aut rerum necessitatibus saepe eveniet, ut et voluptates repudiandae sint et molestiae non recusandae. Itaque earum rerum hic tenetur a sapiente delectus, ut aut reiciendis voluptatibus maiores alias consequatur aut perferendis doloribus asperiores repellat.<\\/dd><\\/dl>\\n<p><a id=\\\"English_translation\\\" name=\\\"English_translation\\\"><\\/a><\\/p>\\n<h2><span class=\\\"editsection\\\">[<a title=\\\"Edit section: English translation\\\" href=\\\"http:\\/\\/en.wikipedia.org\\/w\\/index.php?title=Lorem_ipsum&amp;action=edit&amp;section=2\\\">edit<\\/a>]<\\/span> <span class=\\\"mw-headline\\\">English translation<\\/span><\\/h2>\\n<p>Cicero\'s original text:<\\/p>\\n<dl><dd>&hellip;neque porro quisquam est, qui dolorem ipsum quia dolor sit amet, consectetur, adipisci velit, sed quia non numquam eius modi tempora incidunt ut labore et dolore magnam aliquam quaerat voluptatem. Ut enim ad minima veniam, quis nostrum exercitationem ullam corporis suscipit laboriosam, nisi ut aliquid ex ea commodi consequatur? Quis autem vel eum iure reprehenderit qui in ea voluptate velit esse quam nihil molestiae consequatur, vel illum qui dolorem eum fugiat quo voluptas nulla pariatur?\\\"<\\/dd><\\/dl>\\n<p>H. Rackham\'s 1914 translation:<\\/p>\\n<dl><dd>Nor again is there anyone who loves or pursues or desires to obtain pain of itself, because it is pain, but because occasionally circumstances occur in which toil and pain can procure him some great pleasure. To take a trivial example, which of us ever undertakes laborious physical exercise, except to obtain some advantage from it? But who has any right to find fault with a man who chooses to enjoy a pleasure that has no annoying consequences, or one who avoids a pain that produces no resultant pleasure?<\\/dd><\\/dl>\\n<p><a id=\\\"Variations\\\" name=\\\"Variations\\\"><\\/a><\\/p>\\n<h2><span class=\\\"editsection\\\">[<a title=\\\"Edit section: Variations\\\" href=\\\"http:\\/\\/en.wikipedia.org\\/w\\/index.php?title=Lorem_ipsum&amp;action=edit&amp;section=3\\\">edit<\\/a>]<\\/span> <span class=\\\"mw-headline\\\">Variations<\\/span><\\/h2>\\n<p>Many variations on the standard <em>lorem ipsum<\\/em> text exist, some with little resemblance to the original. Other versions have additional letters &mdash; such as <em>k<\\/em>, <em>w<\\/em>, and <em>z<\\/em> &mdash; that were uncommon or missing in the Latin language, and nonsense words such as <em>Z.zril<\\/em>, <em>takimata<\\/em>, and <em>gubergren<\\/em> added to the original passage to achieve a distribution of letters that more closely approximates English.<\\/p>\\n<p>Cicero\'s first <a title=\\\"Catiline Orations\\\" href=\\\"http:\\/\\/en.wikipedia.org\\/wiki\\/Catiline_Orations\\\">Oration against Catiline<\\/a> is sometimes used in <a title=\\\"Typesetting\\\" href=\\\"http:\\/\\/en.wikipedia.org\\/wiki\\/Typesetting\\\">type specimens<\\/a>: <em>Quousque tandem abutere, Catilina, patientia nostra? Quamdiu etiam furor iste tuus nos eludet? .&nbsp;.&nbsp;.<\\/em><\\/p>\\n<p>Today\'s popular version of <em>lorem ipsum<\\/em> was first created for <a class=\\\"mw-redirect\\\" title=\\\"Aldus Corporation\\\" href=\\\"http:\\/\\/en.wikipedia.org\\/wiki\\/Aldus_Corporation\\\">Aldus Corporation<\\/a>\'s first <a title=\\\"Desktop publishing\\\" href=\\\"http:\\/\\/en.wikipedia.org\\/wiki\\/Desktop_publishing\\\">desktop publishing<\\/a> program <a title=\\\"Adobe PageMaker\\\" href=\\\"http:\\/\\/en.wikipedia.org\\/wiki\\/Adobe_PageMaker\\\">Aldus PageMaker<\\/a> in the mid-1980s for the <a class=\\\"mw-redirect\\\" title=\\\"Apple Macintosh\\\" href=\\\"http:\\/\\/en.wikipedia.org\\/wiki\\/Apple_Macintosh\\\">Apple Macintosh<\\/a>. <a title=\\\"Art director\\\" href=\\\"http:\\/\\/en.wikipedia.org\\/wiki\\/Art_director\\\">Art director<\\/a> Laura Perry adapted older forms of the <em>lorem<\\/em> text from <a title=\\\"Typography\\\" href=\\\"http:\\/\\/en.wikipedia.org\\/wiki\\/Typography\\\">typography<\\/a> samples - it was, for example, widely used in <a title=\\\"Letraset\\\" href=\\\"http:\\/\\/en.wikipedia.org\\/wiki\\/Letraset\\\">Letraset<\\/a> catalogs in the 1960s and 1970s. The text was frequently used in PageMaker <a title=\\\"Template (word processing)\\\" href=\\\"http:\\/\\/en.wikipedia.org\\/wiki\\/Template_%28word_processing%29\\\">templates<\\/a>.<\\/p>\\n<p>Various pieces of software, including text editors (or plug-in modules for same), can generate semi-random \\\"lorem text\\\" that often has little or nothing in common with the canonical variety, other than looking like (and often being) jumbled Latin. Apple\'s <a title=\\\"Pages\\\" href=\\\"http:\\/\\/en.wikipedia.org\\/wiki\\/Pages\\\">Pages<\\/a> software uses this jumbled text as a sample screenplay for their screenplay layout.<\\/p>\\n<p><a id=\\\"See_also\\\" name=\\\"See_also\\\"><\\/a><\\/p>\\n<h2><span class=\\\"editsection\\\">[<a title=\\\"Edit section: See also\\\" href=\\\"http:\\/\\/en.wikipedia.org\\/w\\/index.php?title=Lorem_ipsum&amp;action=edit&amp;section=4\\\">edit<\\/a>]<\\/span> <span class=\\\"mw-headline\\\">See also<\\/span><\\/h2>\\n<ul>\\n<li><a title=\\\"Greeking\\\" href=\\\"http:\\/\\/en.wikipedia.org\\/wiki\\/Greeking\\\">Greeking<\\/a><\\/li>\\n<li><a title=\\\"List of Latin phrases\\\" href=\\\"http:\\/\\/en.wikipedia.org\\/wiki\\/List_of_Latin_phrases\\\">List of Latin phrases<\\/a><\\/li>\\n<li><a title=\\\"Li Europan lingues\\\" href=\\\"http:\\/\\/en.wikipedia.org\\/wiki\\/Li_Europan_lingues\\\">Li Europan lingues<\\/a><\\/li>\\n<li><a class=\\\"mw-redirect\\\" title=\\\"Etaoin shrdlu\\\" href=\\\"http:\\/\\/en.wikipedia.org\\/wiki\\/Etaoin_shrdlu\\\">Etaoin shrdlu<\\/a><\\/li>\\n<li><a title=\\\"The quick brown fox jumps over the lazy dog\\\" href=\\\"http:\\/\\/en.wikipedia.org\\/wiki\\/The_quick_brown_fox_jumps_over_the_lazy_dog\\\">The quick brown fox jumps over the lazy dog<\\/a><\\/li>\\n<li><a title=\\\"Metasyntactic variable\\\" href=\\\"http:\\/\\/en.wikipedia.org\\/wiki\\/Metasyntactic_variable\\\">Metasyntactic variable<\\/a><\\/li>\\n<\\/ul>\\n<p><a id=\\\"References\\\" name=\\\"References\\\"><\\/a><\\/p>\\n<h2><span class=\\\"editsection\\\">[<a title=\\\"Edit section: References\\\" href=\\\"http:\\/\\/en.wikipedia.org\\/w\\/index.php?title=Lorem_ipsum&amp;action=edit&amp;section=5\\\">edit<\\/a>]<\\/span> <span class=\\\"mw-headline\\\">References<\\/span><\\/h2>\\n<div class=\\\"references-small\\\"><ol class=\\\"references\\\">\\n<li id=\\\"cite_note-Microsoft-0\\\"><strong><a href=\\\"http:\\/\\/en.wikipedia.org\\/wiki\\/Lorem_ipsum#cite_ref-Microsoft_0-0\\\">^<\\/a><\\/strong> \\\"<a class=\\\"external text\\\" title=\\\"http:\\/\\/support.microsoft.com\\/kb\\/114222\\/en-us\\\" rel=\\\"nofollow\\\" href=\\\"http:\\/\\/support.microsoft.com\\/kb\\/114222\\/en-us\\\">Description of the \\\"Lorem ipsum dolor sit amet\\\" text that appears in Word Help<\\/a>\\\" (HTML).  Microsoft. Retrieved on <a title=\\\"2007\\\" href=\\\"http:\\/\\/en.wikipedia.org\\/wiki\\/2007\\\">2007<\\/a>-<a title=\\\"March 22\\\" href=\\\"http:\\/\\/en.wikipedia.org\\/wiki\\/March_22\\\">03-22<\\/a>.<\\/li>\\n<\\/ol><\\/div>\\n<p><a id=\\\"External_links\\\" name=\\\"External_links\\\"><\\/a><\\/p>\\n<h2><span class=\\\"editsection\\\">[<a title=\\\"Edit section: External links\\\" href=\\\"http:\\/\\/en.wikipedia.org\\/w\\/index.php?title=Lorem_ipsum&amp;action=edit&amp;section=6\\\">edit<\\/a>]<\\/span> <span class=\\\"mw-headline\\\">External links<\\/span><\\/h2>\\n<div class=\\\"infobox sisterproject\\\">\\n<div style=\\\"float: left;\\\">\\n<div><a title=\\\"Commons:Lorem ipsum\\\" href=\\\"http:\\/\\/commons.wikimedia.org\\/wiki\\/Lorem_ipsum\\\"><img src=\\\"http:\\/\\/upload.wikimedia.org\\/wikipedia\\/en\\/thumb\\/4\\/4a\\/Commons-logo.svg\\/50px-Commons-logo.svg.png\\\" border=\\\"0\\\" alt=\\\"\\\" width=\\\"50\\\" height=\\\"67\\\" \\/><\\/a><\\/div>\\n<\\/div>\\n<div style=\\\"margin-left: 60px;\\\"><a title=\\\"Wikimedia Commons\\\" href=\\\"http:\\/\\/en.wikipedia.org\\/wiki\\/Wikimedia_Commons\\\">Wikimedia Commons<\\/a> has media related to:\\n<div style=\\\"margin-left: 10px;\\\"><em><strong><a class=\\\"extiw\\\" title=\\\"commons:Lorem ipsum\\\" href=\\\"http:\\/\\/commons.wikimedia.org\\/wiki\\/Lorem_ipsum\\\">Lorem ipsum<\\/a><\\/strong><\\/em><\\/div>\\n<\\/div>\\n<\\/div>\\n<div class=\\\"infobox sisterproject\\\">\\n<div class=\\\"floatleft\\\"><span><a class=\\\"image\\\" title=\\\"Wikisource-logo.svg\\\" href=\\\"http:\\/\\/en.wikipedia.org\\/wiki\\/Image:Wikisource-logo.svg\\\"><img src=\\\"http:\\/\\/upload.wikimedia.org\\/wikipedia\\/commons\\/thumb\\/4\\/4c\\/Wikisource-logo.svg\\/50px-Wikisource-logo.svg.png\\\" border=\\\"0\\\" alt=\\\"\\\" width=\\\"50\\\" height=\\\"52\\\" \\/><\\/a><\\/span><\\/div>\\n<div style=\\\"margin-left: 60px;\\\"><a title=\\\"Wikisource\\\" href=\\\"http:\\/\\/en.wikipedia.org\\/wiki\\/Wikisource\\\">Wikisource<\\/a> has original text related to this article:\\n<div style=\\\"margin-left: 10px;\\\"><em><strong><a class=\\\"extiw\\\" title=\\\"wikisource:Lorem ipsum\\\" href=\\\"http:\\/\\/en.wikisource.org\\/wiki\\/Lorem_ipsum\\\">Lorem ipsum<\\/a><\\/strong><\\/em><\\/div>\\n<\\/div>\\n<\\/div>\\n<div class=\\\"infobox sisterproject\\\" style=\\\"float: right;\\\">\\n<div style=\\\"float: left;\\\">\\n<div class=\\\"floatnone\\\"><span><a class=\\\"image\\\" title=\\\"Wiktionary-logo-en.svg\\\" href=\\\"http:\\/\\/en.wikipedia.org\\/wiki\\/Image:Wiktionary-logo-en.svg\\\"><img src=\\\"http:\\/\\/upload.wikimedia.org\\/wikipedia\\/commons\\/thumb\\/f\\/f8\\/Wiktionary-logo-en.svg\\/49px-Wiktionary-logo-en.svg.png\\\" border=\\\"0\\\" alt=\\\"\\\" width=\\\"49\\\" height=\\\"53\\\" \\/><\\/a><\\/span><\\/div>\\n<\\/div>\\n<div style=\\\"margin-left: 60px;\\\">Look up <em><strong><a class=\\\"extiw\\\" title=\\\"wiktionary:Lorem ipsum\\\" href=\\\"http:\\/\\/en.wiktionary.org\\/wiki\\/Lorem_ipsum\\\">Lorem ipsum<\\/a><\\/strong><\\/em> in<br \\/> <a title=\\\"Wiktionary\\\" href=\\\"http:\\/\\/en.wikipedia.org\\/wiki\\/Wiktionary\\\">Wiktionary<\\/a>, the free dictionary.<\\/div>\\n<\\/div>\\n<ul>\\n<li><a class=\\\"external text\\\" title=\\\"http:\\/\\/lorem-ipsum-dolor-sit-amet.com\\\" rel=\\\"nofollow\\\" href=\\\"http:\\/\\/lorem-ipsum-dolor-sit-amet.com\\/\\\">Lorem Ipsum Dolor Sit Amet<\\/a> &mdash; Lorem ipsum and different kinds of greeking texts.<\\/li>\\n<li><a class=\\\"external text\\\" title=\\\"http:\\/\\/www.straightdope.com\\/columns\\/010216.html\\\" rel=\\\"nofollow\\\" href=\\\"http:\\/\\/www.straightdope.com\\/columns\\/010216.html\\\">The Straight Dope<\\/a> &mdash; Cecil Adams\' explanation of Lorem ipsum.<\\/li>\\n<\\/ul>\",\"description_meta_tag\":\"\"}}',2,0,'2008-10-25 09:17:13'),(43,'wildpost',28,'{\"WildPost\":{\"title\":\"my new post\",\"content\":\"<p>\\n<div id=\\\"actions\\\">\\n<div id=\\\"logo\\\"><a href=\\\"http:\\/\\/simpletest.org\\/index.html\\\"><img id=\\\"simpletestlogo\\\" src=\\\"http:\\/\\/simpletest.org\\/images\\/simpletest-logo.png\\\" border=\\\"0\\\" alt=\\\"\\\" width=\\\"335\\\" height=\\\"127\\\" \\/><\\/a><\\/div>\\n<div>\\n<div><a href=\\\"http:\\/\\/simpletest.org\\/en\\/download.html\\\"><img id=\\\"simpletestdownload\\\" src=\\\"http:\\/\\/simpletest.org\\/images\\/simpletest-download.png\\\" border=\\\"0\\\" alt=\\\"\\\" width=\\\"306\\\" height=\\\"109\\\" \\/><\\/a><\\/div>\\n<div><a href=\\\"http:\\/\\/simpletest.org\\/en\\/start-testing.html\\\"><img id=\\\"simpleteststarttesting\\\" src=\\\"http:\\/\\/simpletest.org\\/images\\/simpletest-start-testing.png\\\" border=\\\"0\\\" alt=\\\"\\\" width=\\\"306\\\" height=\\\"109\\\" \\/><\\/a>\\n<ul>\\n<li><a href=\\\"http:\\/\\/simpletest.org\\/en\\/start-testing.html\\\">Start testing with SimpleTest<\\/a><\\/li>\\n<li><a href=\\\"http:\\/\\/simpletest.org\\/en\\/overview.html\\\">Documentation overview<\\/a>\\n<ul>\\n<li><a href=\\\"http:\\/\\/simpletest.org\\/en\\/unit_test_documentation.html\\\">Unit tester<\\/a><\\/li>\\n<li><a href=\\\"http:\\/\\/simpletest.org\\/en\\/group_test_documentation.html\\\">Group tests<\\/a><\\/li>\\n<li><a href=\\\"http:\\/\\/simpletest.org\\/en\\/mock_objects_documentation.html\\\">Mock objects<\\/a><\\/li>\\n<li><a href=\\\"http:\\/\\/simpletest.org\\/en\\/partial_mocks_documentation.html\\\">Partial mocks<\\/a><\\/li>\\n<li><a href=\\\"http:\\/\\/simpletest.org\\/en\\/reporter_documentation.html\\\">Reporting<\\/a><\\/li>\\n<li><a href=\\\"http:\\/\\/simpletest.org\\/en\\/expectation_documentation.html\\\">Expectations<\\/a><\\/li>\\n<li><a href=\\\"http:\\/\\/simpletest.org\\/en\\/web_tester_documentation.html\\\">Web tester<\\/a><\\/li>\\n<li><a href=\\\"http:\\/\\/simpletest.org\\/en\\/form_testing_documentation.html\\\">Testing forms<\\/a><\\/li>\\n<li><a href=\\\"http:\\/\\/simpletest.org\\/en\\/authentication_documentation.html\\\">Authentication<\\/a><\\/li>\\n<li><a href=\\\"http:\\/\\/simpletest.org\\/en\\/browser_documentation.html\\\">Scriptable browser<\\/a><\\/li>\\n<\\/ul>\\n<\\/li>\\n<li><a href=\\\"http:\\/\\/simpletest.org\\/en\\/first_test_tutorial.html\\\">Tutorial : unit testing with PHP<\\/a><\\/li>\\n<li><a href=\\\"http:\\/\\/simpletest.org\\/en\\/experimental_intro.html\\\">Experimental stuff (in SVN only)<\\/a><\\/li>\\n<\\/ul>\\n<\\/div>\\n<div><a href=\\\"http:\\/\\/simpletest.org\\/en\\/support.html\\\"><img id=\\\"simpletestsupport\\\" src=\\\"http:\\/\\/simpletest.org\\/images\\/simpletest-support.png\\\" border=\\\"0\\\" alt=\\\"\\\" width=\\\"306\\\" height=\\\"109\\\" \\/><\\/a><\\/div>\\n<div><a href=\\\"http:\\/\\/simpletest.org\\/en\\/todo.html\\\"><img id=\\\"simpletestcontribute\\\" src=\\\"http:\\/\\/simpletest.org\\/images\\/simpletest-contribute.png\\\" border=\\\"0\\\" alt=\\\"\\\" width=\\\"306\\\" height=\\\"109\\\" \\/><\\/a><\\/div>\\n<div id=\\\"credits\\\"><a href=\\\"http:\\/\\/sourceforge.net\\/projects\\/simpletest\\\"><img src=\\\"http:\\/\\/sourceforge.net\\/sflogo.php?group_id=76550&amp;type=1\\\" border=\\\"0\\\" alt=\\\"SourceForge.net Logo\\\" width=\\\"88\\\" height=\\\"31\\\" \\/><\\/a><\\/div>\\n<\\/div>\\n<\\/div>\\n<div id=\\\"content\\\">\\n<h1>Mock objects documentation<\\/h1>\\n<a name=\\\"what\\\"><\\/a>\\n<h2>What are mock objects?<\\/h2>\\n<p>Mock objects have two roles during a test case: actor and critic.<\\/p>\\n<p>The actor behaviour is to simulate objects that are difficult to set up or time consuming to set up for a test. The classic example is a database connection. Setting up a test database at the start of each test would slow testing to a crawl and would require the installation of the database engine and test data on the test machine. If we can simulate the connection and return data of our choosing we not only win on the pragmatics of testing, but can also feed our code spurious data to see how it responds. We can simulate databases being down or other extremes without having to create a broken database for real. In other words, we get greater control of the test environment.<\\/p>\\n<p>If mock objects only behaved as actors they would simply be known as server stubs. This was originally a pattern named by Robert Binder (Testing object-oriented systems: models, patterns, and tools, Addison-Wesley) in 1999.<\\/p>\\n<p>A server stub is a simulation of an object or component. It should exactly replace a component in a system for test or prototyping purposes, but remain lightweight. This allows tests to run more quickly, or if the simulated class has not been written, to run at all.<\\/p>\\n<p>However, the mock objects not only play a part (by supplying chosen return values on demand) they are also sensitive to the messages sent to them (via expectations). By setting expected parameters for a method call they act as a guard that the calls upon them are made correctly. If expectations are not met they save us the effort of writing a failed test assertion by performing that duty on our behalf.<\\/p>\\n<p>In the case of an imaginary database connection they can test that the query, say SQL, was correctly formed by the object that is using the connection. Set them up with fairly tight expectations and you will hardly need manual assertions at all.<\\/p>\\n<a name=\\\"creation\\\"><\\/a>\\n<h2>Creating mock objects<\\/h2>\\n<p>In the same way that we create server stubs, all we need is an existing class, say a database connection that looks like this...<\\/p>\\n<pre><strong>class DatabaseConnection {\\n    function DatabaseConnection() {\\n    }\\n    \\n    function query() {\\n    }\\n    \\n    function selectQuery() {\\n    }\\n}<\\/strong>\\n<\\/pre>\\n<p>The class does not need to have been implemented yet. To create a mock version of the class we need to include the mock object library and run the generator...<\\/p>\\n<pre><strong>require_once(\'simpletest\\/unit_tester.php\');\\nrequire_once(\'simpletest\\/mock_objects.php\');\\nrequire_once(\'database_connection.php\');\\n\\nMock::generate(\'DatabaseConnection\');<\\/strong>\\n<\\/pre>\\n<p>This generates a clone class called&nbsp;<code>MockDatabaseConnection<\\/code>. We can now create instances of the new class within our test case...<\\/p>\\n<pre>require_once(\'simpletest\\/unit_tester.php\');\\nrequire_once(\'simpletest\\/mock_objects.php\');\\nrequire_once(\'database_connection.php\');\\n\\nMock::generate(\'DatabaseConnection\');\\n<strong>\\nclass MyTestCase extends UnitTestCase {\\n    \\n    function testSomething() {\\n        $connection = &amp;new MockDatabaseConnection();\\n    }\\n}<\\/strong>\\n<\\/pre>\\n<p>Unlike the generated stubs the mock constructor needs a reference to the test case so that it can dispatch passes and failures while checking its expectations. This means that mock objects can only be used within test cases. Despite this their extra power means that stubs are hardly ever used if mocks are available.<\\/p>\\n<p><a class=\\\"target\\\" name=\\\"stub\\\">\\n<h2>Mocks as actors<\\/h2>\\n<\\/a><\\/p>\\n<p>The mock version of a class has all the methods of the original, so that operations like&nbsp;<code>query()]]&gt;<\\/code>&nbsp;are still legal. The return value will be&nbsp;<code>null<\\/code>, but we can change that with...<\\/p>\\n<pre><strong>$connection-&amp;gt;setReturnValue(\'query\', 37)<\\/strong>\\n<\\/pre>\\n<p>Now every time we call&nbsp;<code>query()]]&gt;<\\/code>&nbsp;we get the result of 37. We can set the return value to anything, say a hash of imaginary database results or a list of persistent objects. Parameters are irrelevant here, we always get the same values back each time once they have been set up this way. That may not sound like a convincing replica of a database connection, but for the half a dozen lines of a test method it is usually all you need.<\\/p>\\n<p>We can also add extra methods to the mock when generating it and choose our own class name...<\\/p>\\n<pre><strong>Mock::generate(\'DatabaseConnection\', \'MyMockDatabaseConnection\', array(\'setOptions\'));<\\/strong>\\n<\\/pre>\\n<p>Here the mock will behave as if the&nbsp;<code>setOptions()<\\/code>&nbsp;existed in the original class. This is handy if a class has used the PHP&nbsp;<code>overload()<\\/code>mechanism to add dynamic methods. You can create a special mock to simulate this situation.<\\/p>\\n<p>Things aren\'t always that simple though. One common problem is iterators, where constantly returning the same value could cause an endless loop in the object being tested. For these we need to set up sequences of values. Let\'s say we have a simple iterator that looks like this...<\\/p>\\n<pre>class Iterator {\\n    function Iterator() {\\n    }\\n    \\n    function next() {\\n    }\\n}\\n<\\/pre>\\n<p>This is about the simplest iterator you could have. Assuming that this iterator only returns text until it reaches the end, when it returns false, we can simulate it with...<\\/p>\\n<pre>Mock::generate(\'Iterator\');\\n\\nclass IteratorTest extends UnitTestCase() {\\n    \\n    function testASequence() {<strong>\\n        $iterator = &amp;new MockIterator();\\n        $iterator-&amp;gt;setReturnValue(\'next\', false);\\n        $iterator-&amp;gt;setReturnValueAt(0, \'next\', \'First string\');\\n        $iterator-&amp;gt;setReturnValueAt(1, \'next\', \'Second string\');<\\/strong>\\n        ...\\n    }\\n}\\n<\\/pre>\\n<p>When&nbsp;<code>next()<\\/code>&nbsp;is called on the mock iterator it will first return \\\"First string\\\", on the second call \\\"Second string\\\" will be returned and on any other call&nbsp;<code>false<\\/code>&nbsp;will be returned. The sequenced return values take precedence over the constant return value. The constant one is a kind of default if you like.<\\/p>\\n<p>Another tricky situation is an overloaded&nbsp;<code>get()<\\/code>&nbsp;operation. An example of this is an information holder with name\\/value pairs. Say we have a configuration class like...<\\/p>\\n<pre>class Configuration {\\n    function Configuration() {\\n    }\\n    \\n    function getValue($key) {\\n    }\\n}\\n<\\/pre>\\n<p>This is a classic situation for using mock objects as actual configuration will vary from machine to machine, hardly helping the reliability of our tests if we use it directly. The problem though is that all the data comes through the&nbsp;<code>getValue()<\\/code>&nbsp;method and yet we want different results for different keys. Luckily the mocks have a filter system...<\\/p>\\n<pre><strong>$config = &amp;new MockConfiguration();\\n$config-&amp;gt;setReturnValue(\'getValue\', \'primary\', array(\'db_host\'));\\n$config-&amp;gt;setReturnValue(\'getValue\', \'admin\', array(\'db_user\'));\\n$config-&amp;gt;setReturnValue(\'getValue\', \'secret\', array(\'db_password\'));<\\/strong>\\n<\\/pre>\\n<p>The extra parameter is a list of arguments to attempt to match. In this case we are trying to match only one argument which is the look up key. Now when the mock object has the&nbsp;<code>getValue()<\\/code>&nbsp;method invoked like this...<\\/p>\\n<pre>$config-&amp;gt;getValue(\'db_user\')\\n<\\/pre>\\n<p>...it will return \\\"admin\\\". It finds this by attempting to match the calling arguments to its list of returns one after another until a complete match is found.<\\/p>\\n<p>You can set a default argument argument like so...<\\/p>\\n<pre><strong>$config-&amp;gt;setReturnValue(\'getValue\', false, array(\'*\'));<\\/strong>\\n<\\/pre>\\n<p>This is not the same as setting the return value without any argument requirements like this...<\\/p>\\n<pre><strong>$config-&amp;gt;setReturnValue(\'getValue\', false);<\\/strong>\\n<\\/pre>\\n<p>In the first case it will accept any single argument, but exactly one is required. In the second case any number of arguments will do and it acts as a catchall after all other matches. Note that if we add further single parameter options after the wildcard in the first case, they will be ignored as the wildcard will match first. With complex parameter lists the ordering could be important or else desired matches could be masked by earlier wildcard ones. Declare the most specific matches first if you are not sure.<\\/p>\\n<p>There are times when you want a specific object to be dished out by the mock rather than a copy. The PHP4 copy semantics force us to use a different method for this. You might be simulating a container for example...<\\/p>\\n<pre>class Thing {\\n}\\n\\nclass Vector {\\n    function Vector() {\\n    }\\n    \\n    function get($index) {\\n    }\\n}\\n<\\/pre>\\n<p>In this case you can set a reference into the mock\'s return list...<\\/p>\\n<pre>$thing = &amp;new Thing();<strong>\\n$vector = &amp;new MockVector();\\n$vector-&amp;gt;setReturnReference(\'get\', $thing, array(12));<\\/strong>\\n<\\/pre>\\n<p>With this arrangement you know that every time&nbsp;<code>get(12)]]&gt;<\\/code>&nbsp;is called it will return the same&nbsp;<code>$thing<\\/code>&nbsp;each time. This is compatible with PHP5 as well.<\\/p>\\n<p>These three factors, timing, parameters and whether to copy, can be combined orthogonally. For example...<\\/p>\\n<pre>$complex = &amp;new MockComplexThing();\\n$stuff = &amp;new Stuff();<strong>\\n$complex-&amp;gt;setReturnReferenceAt(3, \'get\', $stuff, array(\'*\', 1));<\\/strong>\\n<\\/pre>\\n<p>This will return the&nbsp;<code>$stuff<\\/code>&nbsp;only on the third call and only if two parameters were set the second of which must be the integer 1. That should cover most simple prototyping situations.<\\/p>\\n<p>A final tricky case is one object creating another, known as a factory pattern. Suppose that on a successful query to our imaginary database, a result set is returned as an iterator with each call to<code>next()<\\/code>&nbsp;giving one row until false. This sounds like a simulation nightmare, but in fact it can all be mocked using the mechanics above.<\\/p>\\n<p>Here\'s how...<\\/p>\\n<pre>Mock::generate(\'DatabaseConnection\');\\nMock::generate(\'ResultIterator\');\\n\\nclass DatabaseTest extends UnitTestCase {\\n    \\n    function testUserFinder() {<strong>\\n        $result = &amp;new MockResultIterator();\\n        $result-&amp;gt;setReturnValue(\'next\', false);\\n        $result-&amp;gt;setReturnValueAt(0, \'next\', array(1, \'tom\'));\\n        $result-&amp;gt;setReturnValueAt(1, \'next\', array(3, \'dick\'));\\n        $result-&amp;gt;setReturnValueAt(2, \'next\', array(6, \'harry\'));\\n        \\n        $connection = &amp;new MockDatabaseConnection();\\n        $connection-&amp;gt;setReturnValue(\'query\', false);\\n        $connection-&amp;gt;setReturnReference(\\n                \'query\',\\n                $result,\\n                array(\'select id, name from users\'));<\\/strong>\\n                \\n        $finder = &amp;new UserFinder($connection);\\n        $this-&amp;gt;assertIdentical(\\n                $finder-&amp;gt;findNames(),\\n                array(\'tom\', \'dick\', \'harry\'));\\n    }\\n}\\n<\\/pre>\\n<p>Now only if our&nbsp;<code>$connection<\\/code>&nbsp;is called with the correct&nbsp;<code>query()<\\/code>&nbsp;will the&nbsp;<code>$result<\\/code>&nbsp;be returned that is itself exhausted after the third call to<code>next()<\\/code>. This should be enough information for our&nbsp;<code>UserFinder<\\/code>&nbsp;class, the class actually being tested here, to come up with goods. A very precise test and not a real database in sight.<\\/p>\\n<a name=\\\"expectations\\\"><\\/a>\\n<h2>Mocks as critics<\\/h2>\\n<p>Although the server stubs approach insulates your tests from real world disruption, it is only half the benefit. You can have the class under test receiving the required messages, but is your new class sending correct ones? Testing this can get messy without a mock objects library.<\\/p>\\n<p>By way of example, suppose we have a&nbsp;<code>SessionPool<\\/code>&nbsp;class that we want to add logging to. Rather than grow the original class into something more complicated, we want to add this behaviour with a decorator (GOF). The&nbsp;<code>SessionPool<\\/code>&nbsp;code currently looks like this...<\\/p>\\n<pre><strong>class SessionPool {\\n    function SessionPool() {\\n        ...\\n    }\\n    \\n    function &amp;findSession($cookie) {\\n        ...\\n    }\\n    ...\\n}\\n\\nclass Session {\\n    ...\\n}<\\/strong>\\n<\\/pre>\\n<p>While our logging code looks like this...<\\/p>\\n<pre><strong>class Log {\\n    function Log() {\\n        ...\\n    }\\n    \\n    function message() {\\n        ...\\n    }\\n}\\n\\nclass LoggingSessionPool {\\n    function LoggingSessionPool(&amp;$session_pool, &amp;$log) {\\n        ...\\n    }\\n    \\n    function &amp;findSession($cookie) {\\n        ...\\n    }\\n    ...\\n}<\\/strong>\\n<\\/pre>\\n<p>Out of all of this, the only class we want to test here is the<code>LoggingSessionPool<\\/code>. In particular we would like to check that the<code>findSession()<\\/code>&nbsp;method is called with the correct session ID in the cookie and that it sent the message \\\"Starting session $cookie\\\" to the logger.<\\/p>\\n<p>Despite the fact that we are testing only a few lines of production code, here is what we would have to do in a conventional test case:<\\/p>\\n<ol>\\n<li>Create a log object.<\\/li>\\n<li>Set a directory to place the log file.<\\/li>\\n<li>Set the directory permissions so we can write the log.<\\/li>\\n<li>Create a&nbsp;<code>SessionPool<\\/code>&nbsp;object.<\\/li>\\n<li>Hand start a session, which probably does lot\'s of things.<\\/li>\\n<li>Invoke&nbsp;<code>findSession()<\\/code>.<\\/li>\\n<li>Read the new Session ID (hope there is an accessor!).<\\/li>\\n<li>Raise a test assertion to confirm that the ID matches the cookie.<\\/li>\\n<li>Read the last line of the log file.<\\/li>\\n<li>Pattern match out the extra logging timestamps, etc.<\\/li>\\n<li>Assert that the session message is contained in the text.<\\/li>\\n<\\/ol>It is hardly surprising that developers hate writing tests when they are this much drudgery. To make things worse, every time the logging format changes or the method of creating new sessions changes, we have to rewrite parts of this test even though this test does not officially test those parts of the system. We are creating headaches for the writers of these other classes.\\n<p>&nbsp;<\\/p>\\n<p>Instead, here is the complete test method using mock object magic...<\\/p>\\n<pre>Mock::generate(\'Session\');\\nMock::generate(\'SessionPool\');\\nMock::generate(\'Log\');\\n\\nclass LoggingSessionPoolTest extends UnitTestCase {\\n    ...\\n    function testFindSessionLogging() {<strong>\\n        $session = &amp;new MockSession();\\n        $pool = &amp;new MockSessionPool();\\n        $pool-&amp;gt;setReturnReference(\'findSession\', $session);\\n        $pool-&amp;gt;expectOnce(\'findSession\', array(\'abc\'));\\n        \\n        $log = &amp;new MockLog();\\n        $log-&amp;gt;expectOnce(\'message\', array(\'Starting session abc\'));\\n        \\n        $logging_pool = &amp;new LoggingSessionPool($pool, $log);\\n        $this-&amp;gt;assertReference($logging_pool-&amp;gt;findSession(\'abc\'), $session);<\\/strong>\\n    }\\n}\\n<\\/pre>\\n<p>We start by creating a dummy session. We don\'t have to be too fussy about this as the check for which session we want is done elsewhere. We only need to check that it was the same one that came from the session pool.<\\/p>\\n<p><code>findSession()<\\/code>&nbsp;is a factory method the simulation of which is described&nbsp;<a href=\\\"http:\\/\\/simpletest.org\\/en\\/mock_objects_documentation.html#stub\\\">above<\\/a>. The point of departure comes with the first<code>expectOnce()<\\/code>&nbsp;call. This line states that whenever&nbsp;<code>findSession()<\\/code>&nbsp;is invoked on the mock, it will test the incoming arguments. If it receives the single argument of a string \\\"abc\\\" then a test pass is sent to the unit tester, otherwise a fail is generated. This was the part where we checked that the right session was asked for. The argument list follows the same format as the one for setting return values. You can have wildcards and sequences and the order of evaluation is the same.<\\/p>\\n<p>We use the same pattern to set up the mock logger. We tell it that it should have&nbsp;<code>message()<\\/code>&nbsp;invoked once only with the argument \\\"Starting session abc\\\". By testing the calling arguments, rather than the logger output, we insulate the test from any display changes in the logger.<\\/p>\\n<p>We start to run our tests when we create the new<code>LoggingSessionPool<\\/code>&nbsp;and feed it our preset mock objects. Everything is now under our control.<\\/p>\\n<p>This is still quite a bit of test code, but the code is very strict. If it still seems rather daunting there is a lot less of it than if we tried this without mocks and this particular test, interactions rather than output, is always more work to set up. More often you will be testing more complex situations without needing this level or precision. Also some of this can be refactored into a test case<code>setUp()<\\/code>&nbsp;method.<\\/p>\\n<p>Here is the full list of expectations you can set on a mock object in<a href=\\\"http:\\/\\/www.lastcraft.com\\/simple_test.php\\\">SimpleTest<\\/a>...<\\/p>\\n<table border=\\\"0\\\">\\n<thead>\\n<tr>\\n<th>Expectation<\\/th><th>Needs&nbsp;<code>tally()<\\/code><\\/th>\\n<\\/tr>\\n<\\/thead>\\n<tbody>\\n<tr>\\n<td><code>expect($method, $args)<\\/code><\\/td>\\n<td>No<\\/td>\\n<\\/tr>\\n<tr>\\n<td><code>expectAt($timing, $method, $args)<\\/code><\\/td>\\n<td>No<\\/td>\\n<\\/tr>\\n<tr>\\n<td><code>expectCallCount($method, $count)<\\/code><\\/td>\\n<td>Yes<\\/td>\\n<\\/tr>\\n<tr>\\n<td><code>expectMaximumCallCount($method, $count)<\\/code><\\/td>\\n<td>No<\\/td>\\n<\\/tr>\\n<tr>\\n<td><code>expectMinimumCallCount($method, $count)<\\/code><\\/td>\\n<td>Yes<\\/td>\\n<\\/tr>\\n<tr>\\n<td><code>expectNever($method)<\\/code><\\/td>\\n<td>No<\\/td>\\n<\\/tr>\\n<tr>\\n<td><code>expectOnce($method, $args)<\\/code><\\/td>\\n<td>Yes<\\/td>\\n<\\/tr>\\n<tr>\\n<td><code>expectAtLeastOnce($method, $args)<\\/code><\\/td>\\n<td>Yes<\\/td>\\n<\\/tr>\\n<\\/tbody>\\n<\\/table>\\nWhere the parameters are...<dl><dt class=\\\"new_code\\\">$method<\\/dt><dd>The method name, as a string, to apply the condition to.<\\/dd><dt class=\\\"new_code\\\">$args<\\/dt><dd>The arguments as a list. Wildcards can be included in the same manner as for&nbsp;<code>setReturn()<\\/code>. This argument is optional for&nbsp;<code>expectOnce()<\\/code>&nbsp;and<code>expectAtLeastOnce()<\\/code>.<\\/dd><dt class=\\\"new_code\\\">$timing<\\/dt><dd>The only point in time to test the condition. The first call starts at zero.<\\/dd><dt class=\\\"new_code\\\">$count<\\/dt><dd>The number of calls expected.<\\/dd><\\/dl>The method&nbsp;<code>expectMaximumCallCount()<\\/code>&nbsp;is slightly different in that it will only ever generate a failure. It is silent if the limit is never reached.\\n<p>&nbsp;<\\/p>\\n<p>Also if you have juste one call in your test, make sure you\'re using<code>expectOnce<\\/code>.<br \\/>Using&nbsp;<code>$mocked-&gt;expectAt(0, \'method\', \'args);<\\/code>&nbsp;on its own will not be catched : checking the arguments and the overall call count are currently independant.<\\/p>\\n<p>Like the assertions within test cases, all of the expectations can take a message override as an extra parameter. Also the original failure message can be embedded in the output as \\\"%s\\\".<\\/p>\\n<a name=\\\"approaches\\\"><\\/a>\\n<h2>Other approaches<\\/h2>\\n<p>There are three approaches to creating mocks including the one that SimpleTest employs. Coding them by hand using a base class, generating them to a file and dynamically generating them on the fly.<\\/p>\\n<p>Mock objects generated with&nbsp;<a>SimpleTest<\\/a>&nbsp;are dynamic. They are created at run time in memory, using&nbsp;<code>eval()<\\/code>, rather than written out to a file. This makes the mocks easy to create, a one liner, especially compared with hand crafting them in a parallel class hierarchy. The problem is that the behaviour is usually set up in the tests themselves. If the original objects change the mock versions that the tests rely on can get out of sync. This can happen with the parallel hierarchy approach as well, but is far more quickly detected.<\\/p>\\n<p>The solution, of course, is to add some real integration tests. You don\'t need very many and the convenience gained from the mocks more than outweighs the small amount of extra testing. You cannot trust code that was only tested with mocks.<\\/p>\\n<p>If you are still determined to build static libraries of mocks because you want to simulate very specific behaviour, you can achieve the same effect using the SimpleTest class generator. In your library file, say&nbsp;<em>mocks\\/connection.php<\\/em>&nbsp;for a database connection, create a mock and inherit to override special methods or add presets...<\\/p>\\n<\\/div>\\n<\\/p>\",\"description_meta_tag\":\"\"}}',2,0,'2008-10-25 09:47:09'),(44,'wildpost',28,'{\"WildPost\":{\"title\":\"Unit tests are good. Do them.\",\"content\":\"<p>&nbsp;<\\/p>\\n<div id=\\\"actions\\\">\\n<div id=\\\"logo\\\"><a href=\\\"http:\\/\\/simpletest.org\\/index.html\\\"><img id=\\\"simpletestlogo\\\" src=\\\"http:\\/\\/simpletest.org\\/images\\/simpletest-logo.png\\\" border=\\\"0\\\" alt=\\\"\\\" width=\\\"335\\\" height=\\\"127\\\" \\/><\\/a><\\/div>\\n<div>\\n<div><a href=\\\"http:\\/\\/simpletest.org\\/en\\/download.html\\\"><img id=\\\"simpletestdownload\\\" src=\\\"http:\\/\\/simpletest.org\\/images\\/simpletest-download.png\\\" border=\\\"0\\\" alt=\\\"\\\" width=\\\"306\\\" height=\\\"109\\\" \\/><\\/a><\\/div>\\n<div><a href=\\\"http:\\/\\/simpletest.org\\/en\\/start-testing.html\\\"><img id=\\\"simpleteststarttesting\\\" src=\\\"http:\\/\\/simpletest.org\\/images\\/simpletest-start-testing.png\\\" border=\\\"0\\\" alt=\\\"\\\" width=\\\"306\\\" height=\\\"109\\\" \\/><\\/a>\\n<ul>\\n<li><a href=\\\"http:\\/\\/simpletest.org\\/en\\/start-testing.html\\\">Start testing with SimpleTest<\\/a><\\/li>\\n<li><a href=\\\"http:\\/\\/simpletest.org\\/en\\/overview.html\\\">Documentation overview<\\/a>\\n<ul>\\n<li><a href=\\\"http:\\/\\/simpletest.org\\/en\\/unit_test_documentation.html\\\">Unit tester<\\/a><\\/li>\\n<li><a href=\\\"http:\\/\\/simpletest.org\\/en\\/group_test_documentation.html\\\">Group tests<\\/a><\\/li>\\n<li><a href=\\\"http:\\/\\/simpletest.org\\/en\\/mock_objects_documentation.html\\\">Mock objects<\\/a><\\/li>\\n<li><a href=\\\"http:\\/\\/simpletest.org\\/en\\/partial_mocks_documentation.html\\\">Partial mocks<\\/a><\\/li>\\n<li><a href=\\\"http:\\/\\/simpletest.org\\/en\\/reporter_documentation.html\\\">Reporting<\\/a><\\/li>\\n<li><a href=\\\"http:\\/\\/simpletest.org\\/en\\/expectation_documentation.html\\\">Expectations<\\/a><\\/li>\\n<li><a href=\\\"http:\\/\\/simpletest.org\\/en\\/web_tester_documentation.html\\\">Web tester<\\/a><\\/li>\\n<li><a href=\\\"http:\\/\\/simpletest.org\\/en\\/form_testing_documentation.html\\\">Testing forms<\\/a><\\/li>\\n<li><a href=\\\"http:\\/\\/simpletest.org\\/en\\/authentication_documentation.html\\\">Authentication<\\/a><\\/li>\\n<li><a href=\\\"http:\\/\\/simpletest.org\\/en\\/browser_documentation.html\\\">Scriptable browser<\\/a><\\/li>\\n<\\/ul>\\n<\\/li>\\n<li><a href=\\\"http:\\/\\/simpletest.org\\/en\\/first_test_tutorial.html\\\">Tutorial : unit testing with PHP<\\/a><\\/li>\\n<li><a href=\\\"http:\\/\\/simpletest.org\\/en\\/experimental_intro.html\\\">Experimental stuff (in SVN only)<\\/a><\\/li>\\n<\\/ul>\\n<\\/div>\\n<div><a href=\\\"http:\\/\\/simpletest.org\\/en\\/support.html\\\"><img id=\\\"simpletestsupport\\\" src=\\\"http:\\/\\/simpletest.org\\/images\\/simpletest-support.png\\\" border=\\\"0\\\" alt=\\\"\\\" width=\\\"306\\\" height=\\\"109\\\" \\/><\\/a><\\/div>\\n<div><a href=\\\"http:\\/\\/simpletest.org\\/en\\/todo.html\\\"><img id=\\\"simpletestcontribute\\\" src=\\\"http:\\/\\/simpletest.org\\/images\\/simpletest-contribute.png\\\" border=\\\"0\\\" alt=\\\"\\\" width=\\\"306\\\" height=\\\"109\\\" \\/><\\/a><\\/div>\\n<div id=\\\"credits\\\"><a href=\\\"http:\\/\\/sourceforge.net\\/projects\\/simpletest\\\"><img src=\\\"http:\\/\\/sourceforge.net\\/sflogo.php?group_id=76550&amp;type=1\\\" border=\\\"0\\\" alt=\\\"SourceForge.net Logo\\\" width=\\\"88\\\" height=\\\"31\\\" \\/><\\/a><\\/div>\\n<\\/div>\\n<\\/div>\\n<div id=\\\"content\\\">\\n<h1>Mock objects documentation<\\/h1>\\n<a name=\\\"what\\\"><\\/a>\\n<h2>What are mock objects?<\\/h2>\\n<p>Mock objects have two roles during a test case: actor and critic.<\\/p>\\n<p>The actor behaviour is to simulate objects that are difficult to set up or time consuming to set up for a test. The classic example is a database connection. Setting up a test database at the start of each test would slow testing to a crawl and would require the installation of the database engine and test data on the test machine. If we can simulate the connection and return data of our choosing we not only win on the pragmatics of testing, but can also feed our code spurious data to see how it responds. We can simulate databases being down or other extremes without having to create a broken database for real. In other words, we get greater control of the test environment.<\\/p>\\n<p>If mock objects only behaved as actors they would simply be known as server stubs. This was originally a pattern named by Robert Binder (Testing object-oriented systems: models, patterns, and tools, Addison-Wesley) in 1999.<\\/p>\\n<p>A server stub is a simulation of an object or component. It should exactly replace a component in a system for test or prototyping purposes, but remain lightweight. This allows tests to run more quickly, or if the simulated class has not been written, to run at all.<\\/p>\\n<p>However, the mock objects not only play a part (by supplying chosen return values on demand) they are also sensitive to the messages sent to them (via expectations). By setting expected parameters for a method call they act as a guard that the calls upon them are made correctly. If expectations are not met they save us the effort of writing a failed test assertion by performing that duty on our behalf.<\\/p>\\n<p>In the case of an imaginary database connection they can test that the query, say SQL, was correctly formed by the object that is using the connection. Set them up with fairly tight expectations and you will hardly need manual assertions at all.<\\/p>\\n<a name=\\\"creation\\\"><\\/a>\\n<h2>Creating mock objects<\\/h2>\\n<p>In the same way that we create server stubs, all we need is an existing class, say a database connection that looks like this...<\\/p>\\n<pre><strong>class DatabaseConnection {\\n    function DatabaseConnection() {\\n    }\\n    \\n    function query() {\\n    }\\n    \\n    function selectQuery() {\\n    }\\n}<\\/strong>\\n<\\/pre>\\n<p>The class does not need to have been implemented yet. To create a mock version of the class we need to include the mock object library and run the generator...<\\/p>\\n<pre><strong>require_once(\'simpletest\\/unit_tester.php\');\\nrequire_once(\'simpletest\\/mock_objects.php\');\\nrequire_once(\'database_connection.php\');\\n\\nMock::generate(\'DatabaseConnection\');<\\/strong>\\n<\\/pre>\\n<p>This generates a clone class called&nbsp;<code>MockDatabaseConnection<\\/code>. We can now create instances of the new class within our test case...<\\/p>\\n<pre>require_once(\'simpletest\\/unit_tester.php\');\\nrequire_once(\'simpletest\\/mock_objects.php\');\\nrequire_once(\'database_connection.php\');\\n\\nMock::generate(\'DatabaseConnection\');\\n<strong>\\nclass MyTestCase extends UnitTestCase {\\n    \\n    function testSomething() {\\n        $connection = &amp;new MockDatabaseConnection();\\n    }\\n}<\\/strong>\\n<\\/pre>\\n<p>Unlike the generated stubs the mock constructor needs a reference to the test case so that it can dispatch passes and failures while checking its expectations. This means that mock objects can only be used within test cases. Despite this their extra power means that stubs are hardly ever used if mocks are available.<\\/p>\\n<p><a name=\\\"stub\\\"><\\/a><\\/p>\\n<p>The mock version of a class has all the methods of the original, so that operations like&nbsp;<code>query()]]&gt;<\\/code>&nbsp;are still legal. The return value will be&nbsp;<code>null<\\/code>, but we can change that with...<\\/p>\\n<pre><strong>$connection-&amp;gt;setReturnValue(\'query\', 37)<\\/strong>\\n<\\/pre>\\n<p>Now every time we call&nbsp;<code>query()]]&gt;<\\/code>&nbsp;we get the result of 37. We can set the return value to anything, say a hash of imaginary database results or a list of persistent objects. Parameters are irrelevant here, we always get the same values back each time once they have been set up this way. That may not sound like a convincing replica of a database connection, but for the half a dozen lines of a test method it is usually all you need.<\\/p>\\n<p>We can also add extra methods to the mock when generating it and choose our own class name...<\\/p>\\n<pre><strong>Mock::generate(\'DatabaseConnection\', \'MyMockDatabaseConnection\', array(\'setOptions\'));<\\/strong>\\n<\\/pre>\\n<p>Here the mock will behave as if the&nbsp;<code>setOptions()<\\/code>&nbsp;existed in the original class. This is handy if a class has used the PHP&nbsp;<code>overload()<\\/code>mechanism to add dynamic methods. You can create a special mock to simulate this situation.<\\/p>\\n<p>Things aren\'t always that simple though. One common problem is iterators, where constantly returning the same value could cause an endless loop in the object being tested. For these we need to set up sequences of values. Let\'s say we have a simple iterator that looks like this...<\\/p>\\n<pre>class Iterator {\\n    function Iterator() {\\n    }\\n    \\n    function next() {\\n    }\\n}\\n<\\/pre>\\n<p>This is about the simplest iterator you could have. Assuming that this iterator only returns text until it reaches the end, when it returns false, we can simulate it with...<\\/p>\\n<pre>Mock::generate(\'Iterator\');\\n\\nclass IteratorTest extends UnitTestCase() {\\n    \\n    function testASequence() {<strong>\\n        $iterator = &amp;new MockIterator();\\n        $iterator-&amp;gt;setReturnValue(\'next\', false);\\n        $iterator-&amp;gt;setReturnValueAt(0, \'next\', \'First string\');\\n        $iterator-&amp;gt;setReturnValueAt(1, \'next\', \'Second string\');<\\/strong>\\n        ...\\n    }\\n}\\n<\\/pre>\\n<p>When&nbsp;<code>next()<\\/code>&nbsp;is called on the mock iterator it will first return \\\"First string\\\", on the second call \\\"Second string\\\" will be returned and on any other call&nbsp;<code>false<\\/code>&nbsp;will be returned. The sequenced return values take precedence over the constant return value. The constant one is a kind of default if you like.<\\/p>\\n<p>Another tricky situation is an overloaded&nbsp;<code>get()<\\/code>&nbsp;operation. An example of this is an information holder with name\\/value pairs. Say we have a configuration class like...<\\/p>\\n<pre>class Configuration {\\n    function Configuration() {\\n    }\\n    \\n    function getValue($key) {\\n    }\\n}\\n<\\/pre>\\n<p>This is a classic situation for using mock objects as actual configuration will vary from machine to machine, hardly helping the reliability of our tests if we use it directly. The problem though is that all the data comes through the&nbsp;<code>getValue()<\\/code>&nbsp;method and yet we want different results for different keys. Luckily the mocks have a filter system...<\\/p>\\n<pre><strong>$config = &amp;new MockConfiguration();\\n$config-&amp;gt;setReturnValue(\'getValue\', \'primary\', array(\'db_host\'));\\n$config-&amp;gt;setReturnValue(\'getValue\', \'admin\', array(\'db_user\'));\\n$config-&amp;gt;setReturnValue(\'getValue\', \'secret\', array(\'db_password\'));<\\/strong>\\n<\\/pre>\\n<p>The extra parameter is a list of arguments to attempt to match. In this case we are trying to match only one argument which is the look up key. Now when the mock object has the&nbsp;<code>getValue()<\\/code>&nbsp;method invoked like this...<\\/p>\\n<pre>$config-&amp;gt;getValue(\'db_user\')\\n<\\/pre>\\n<p>...it will return \\\"admin\\\". It finds this by attempting to match the calling arguments to its list of returns one after another until a complete match is found.<\\/p>\\n<p>You can set a default argument argument like so...<\\/p>\\n<pre><strong>$config-&amp;gt;setReturnValue(\'getValue\', false, array(\'*\'));<\\/strong>\\n<\\/pre>\\n<p>This is not the same as setting the return value without any argument requirements like this...<\\/p>\\n<pre><strong>$config-&amp;gt;setReturnValue(\'getValue\', false);<\\/strong>\\n<\\/pre>\\n<p>In the first case it will accept any single argument, but exactly one is required. In the second case any number of arguments will do and it acts as a catchall after all other matches. Note that if we add further single parameter options after the wildcard in the first case, they will be ignored as the wildcard will match first. With complex parameter lists the ordering could be important or else desired matches could be masked by earlier wildcard ones. Declare the most specific matches first if you are not sure.<\\/p>\\n<p>There are times when you want a specific object to be dished out by the mock rather than a copy. The PHP4 copy semantics force us to use a different method for this. You might be simulating a container for example...<\\/p>\\n<pre>class Thing {\\n}\\n\\nclass Vector {\\n    function Vector() {\\n    }\\n    \\n    function get($index) {\\n    }\\n}\\n<\\/pre>\\n<p>In this case you can set a reference into the mock\'s return list...<\\/p>\\n<pre>$thing = &amp;new Thing();<strong>\\n$vector = &amp;new MockVector();\\n$vector-&amp;gt;setReturnReference(\'get\', $thing, array(12));<\\/strong>\\n<\\/pre>\\n<p>With this arrangement you know that every time&nbsp;<code>get(12)]]&gt;<\\/code>&nbsp;is called it will return the same&nbsp;<code>$thing<\\/code>&nbsp;each time. This is compatible with PHP5 as well.<\\/p>\\n<p>These three factors, timing, parameters and whether to copy, can be combined orthogonally. For example...<\\/p>\\n<pre>$complex = &amp;new MockComplexThing();\\n$stuff = &amp;new Stuff();<strong>\\n$complex-&amp;gt;setReturnReferenceAt(3, \'get\', $stuff, array(\'*\', 1));<\\/strong>\\n<\\/pre>\\n<p>This will return the&nbsp;<code>$stuff<\\/code>&nbsp;only on the third call and only if two parameters were set the second of which must be the integer 1. That should cover most simple prototyping situations.<\\/p>\\n<p>A final tricky case is one object creating another, known as a factory pattern. Suppose that on a successful query to our imaginary database, a result set is returned as an iterator with each call to<code>next()<\\/code>&nbsp;giving one row until false. This sounds like a simulation nightmare, but in fact it can all be mocked using the mechanics above.<\\/p>\\n<p>Here\'s how...<\\/p>\\n<pre>Mock::generate(\'DatabaseConnection\');\\nMock::generate(\'ResultIterator\');\\n\\nclass DatabaseTest extends UnitTestCase {\\n    \\n    function testUserFinder() {<strong>\\n        $result = &amp;new MockResultIterator();\\n        $result-&amp;gt;setReturnValue(\'next\', false);\\n        $result-&amp;gt;setReturnValueAt(0, \'next\', array(1, \'tom\'));\\n        $result-&amp;gt;setReturnValueAt(1, \'next\', array(3, \'dick\'));\\n        $result-&amp;gt;setReturnValueAt(2, \'next\', array(6, \'harry\'));\\n        \\n        $connection = &amp;new MockDatabaseConnection();\\n        $connection-&amp;gt;setReturnValue(\'query\', false);\\n        $connection-&amp;gt;setReturnReference(\\n                \'query\',\\n                $result,\\n                array(\'select id, name from users\'));<\\/strong>\\n                \\n        $finder = &amp;new UserFinder($connection);\\n        $this-&amp;gt;assertIdentical(\\n                $finder-&amp;gt;findNames(),\\n                array(\'tom\', \'dick\', \'harry\'));\\n    }\\n}\\n<\\/pre>\\n<p>Now only if our&nbsp;<code>$connection<\\/code>&nbsp;is called with the correct&nbsp;<code>query()<\\/code>&nbsp;will the&nbsp;<code>$result<\\/code>&nbsp;be returned that is itself exhausted after the third call to<code>next()<\\/code>. This should be enough information for our&nbsp;<code>UserFinder<\\/code>&nbsp;class, the class actually being tested here, to come up with goods. A very precise test and not a real database in sight.<\\/p>\\n<a name=\\\"expectations\\\"><\\/a>\\n<h2>Mocks as critics<\\/h2>\\n<p>Although the server stubs approach insulates your tests from real world disruption, it is only half the benefit. You can have the class under test receiving the required messages, but is your new class sending correct ones? Testing this can get messy without a mock objects library.<\\/p>\\n<p>By way of example, suppose we have a&nbsp;<code>SessionPool<\\/code>&nbsp;class that we want to add logging to. Rather than grow the original class into something more complicated, we want to add this behaviour with a decorator (GOF). The&nbsp;<code>SessionPool<\\/code>&nbsp;code currently looks like this...<\\/p>\\n<pre><strong>class SessionPool {\\n    function SessionPool() {\\n        ...\\n    }\\n    \\n    function &amp;findSession($cookie) {\\n        ...\\n    }\\n    ...\\n}\\n\\nclass Session {\\n    ...\\n}<\\/strong>\\n<\\/pre>\\n<p>While our logging code looks like this...<\\/p>\\n<pre><strong>class Log {\\n    function Log() {\\n        ...\\n    }\\n    \\n    function message() {\\n        ...\\n    }\\n}\\n\\nclass LoggingSessionPool {\\n    function LoggingSessionPool(&amp;$session_pool, &amp;$log) {\\n        ...\\n    }\\n    \\n    function &amp;findSession($cookie) {\\n        ...\\n    }\\n    ...\\n}<\\/strong>\\n<\\/pre>\\n<p>Out of all of this, the only class we want to test here is the<code>LoggingSessionPool<\\/code>. In particular we would like to check that the<code>findSession()<\\/code>&nbsp;method is called with the correct session ID in the cookie and that it sent the message \\\"Starting session $cookie\\\" to the logger.<\\/p>\\n<p>Despite the fact that we are testing only a few lines of production code, here is what we would have to do in a conventional test case:<\\/p>\\n<ol>\\n<li>Create a log object.<\\/li>\\n<li>Set a directory to place the log file.<\\/li>\\n<li>Set the directory permissions so we can write the log.<\\/li>\\n<li>Create a&nbsp;<code>SessionPool<\\/code>&nbsp;object.<\\/li>\\n<li>Hand start a session, which probably does lot\'s of things.<\\/li>\\n<li>Invoke&nbsp;<code>findSession()<\\/code>.<\\/li>\\n<li>Read the new Session ID (hope there is an accessor!).<\\/li>\\n<li>Raise a test assertion to confirm that the ID matches the cookie.<\\/li>\\n<li>Read the last line of the log file.<\\/li>\\n<li>Pattern match out the extra logging timestamps, etc.<\\/li>\\n<li>Assert that the session message is contained in the text.<\\/li>\\n<\\/ol>It is hardly surprising that developers hate writing tests when they are this much drudgery. To make things worse, every time the logging format changes or the method of creating new sessions changes, we have to rewrite parts of this test even though this test does not officially test those parts of the system. We are creating headaches for the writers of these other classes.\\n<p>&nbsp;<\\/p>\\n<p>Instead, here is the complete test method using mock object magic...<\\/p>\\n<pre>Mock::generate(\'Session\');\\nMock::generate(\'SessionPool\');\\nMock::generate(\'Log\');\\n\\nclass LoggingSessionPoolTest extends UnitTestCase {\\n    ...\\n    function testFindSessionLogging() {<strong>\\n        $session = &amp;new MockSession();\\n        $pool = &amp;new MockSessionPool();\\n        $pool-&amp;gt;setReturnReference(\'findSession\', $session);\\n        $pool-&amp;gt;expectOnce(\'findSession\', array(\'abc\'));\\n        \\n        $log = &amp;new MockLog();\\n        $log-&amp;gt;expectOnce(\'message\', array(\'Starting session abc\'));\\n        \\n        $logging_pool = &amp;new LoggingSessionPool($pool, $log);\\n        $this-&amp;gt;assertReference($logging_pool-&amp;gt;findSession(\'abc\'), $session);<\\/strong>\\n    }\\n}\\n<\\/pre>\\n<p>We start by creating a dummy session. We don\'t have to be too fussy about this as the check for which session we want is done elsewhere. We only need to check that it was the same one that came from the session pool.<\\/p>\\n<p><code>findSession()<\\/code>&nbsp;is a factory method the simulation of which is described&nbsp;<a href=\\\"http:\\/\\/simpletest.org\\/en\\/mock_objects_documentation.html#stub\\\">above<\\/a>. The point of departure comes with the first<code>expectOnce()<\\/code>&nbsp;call. This line states that whenever&nbsp;<code>findSession()<\\/code>&nbsp;is invoked on the mock, it will test the incoming arguments. If it receives the single argument of a string \\\"abc\\\" then a test pass is sent to the unit tester, otherwise a fail is generated. This was the part where we checked that the right session was asked for. The argument list follows the same format as the one for setting return values. You can have wildcards and sequences and the order of evaluation is the same.<\\/p>\\n<p>We use the same pattern to set up the mock logger. We tell it that it should have&nbsp;<code>message()<\\/code>&nbsp;invoked once only with the argument \\\"Starting session abc\\\". By testing the calling arguments, rather than the logger output, we insulate the test from any display changes in the logger.<\\/p>\\n<p>We start to run our tests when we create the new<code>LoggingSessionPool<\\/code>&nbsp;and feed it our preset mock objects. Everything is now under our control.<\\/p>\\n<p>This is still quite a bit of test code, but the code is very strict. If it still seems rather daunting there is a lot less of it than if we tried this without mocks and this particular test, interactions rather than output, is always more work to set up. More often you will be testing more complex situations without needing this level or precision. Also some of this can be refactored into a test case<code>setUp()<\\/code>&nbsp;method.<\\/p>\\n<p>Here is the full list of expectations you can set on a mock object in<a href=\\\"http:\\/\\/www.lastcraft.com\\/simple_test.php\\\">SimpleTest<\\/a>...<\\/p>\\n<table border=\\\"0\\\">\\n<thead>\\n<tr>\\n<th>Expectation<\\/th><th>Needs&nbsp;<code>tally()<\\/code><\\/th>\\n<\\/tr>\\n<\\/thead>\\n<tbody>\\n<tr>\\n<td><code>expect($method, $args)<\\/code><\\/td>\\n<td>No<\\/td>\\n<\\/tr>\\n<tr>\\n<td><code>expectAt($timing, $method, $args)<\\/code><\\/td>\\n<td>No<\\/td>\\n<\\/tr>\\n<tr>\\n<td><code>expectCallCount($method, $count)<\\/code><\\/td>\\n<td>Yes<\\/td>\\n<\\/tr>\\n<tr>\\n<td><code>expectMaximumCallCount($method, $count)<\\/code><\\/td>\\n<td>No<\\/td>\\n<\\/tr>\\n<tr>\\n<td><code>expectMinimumCallCount($method, $count)<\\/code><\\/td>\\n<td>Yes<\\/td>\\n<\\/tr>\\n<tr>\\n<td><code>expectNever($method)<\\/code><\\/td>\\n<td>No<\\/td>\\n<\\/tr>\\n<tr>\\n<td><code>expectOnce($method, $args)<\\/code><\\/td>\\n<td>Yes<\\/td>\\n<\\/tr>\\n<tr>\\n<td><code>expectAtLeastOnce($method, $args)<\\/code><\\/td>\\n<td>Yes<\\/td>\\n<\\/tr>\\n<\\/tbody>\\n<\\/table>\\nWhere the parameters are...<dl><dt class=\\\"new_code\\\">$method<\\/dt><dd>The method name, as a string, to apply the condition to.<\\/dd><dt class=\\\"new_code\\\">$args<\\/dt><dd>The arguments as a list. Wildcards can be included in the same manner as for&nbsp;<code>setReturn()<\\/code>. This argument is optional for&nbsp;<code>expectOnce()<\\/code>&nbsp;and<code>expectAtLeastOnce()<\\/code>.<\\/dd><dt class=\\\"new_code\\\">$timing<\\/dt><dd>The only point in time to test the condition. The first call starts at zero.<\\/dd><dt class=\\\"new_code\\\">$count<\\/dt><dd>The number of calls expected.<\\/dd><\\/dl>The method&nbsp;<code>expectMaximumCallCount()<\\/code>&nbsp;is slightly different in that it will only ever generate a failure. It is silent if the limit is never reached.\\n<p>&nbsp;<\\/p>\\n<p>Also if you have juste one call in your test, make sure you\'re using<code>expectOnce<\\/code>.<br \\/>Using&nbsp;<code>$mocked-&gt;expectAt(0, \'method\', \'args);<\\/code>&nbsp;on its own will not be catched : checking the arguments and the overall call count are currently independant.<\\/p>\\n<p>Like the assertions within test cases, all of the expectations can take a message override as an extra parameter. Also the original failure message can be embedded in the output as \\\"%s\\\".<\\/p>\\n<a name=\\\"approaches\\\"><\\/a>\\n<h2>Other approaches<\\/h2>\\n<p>There are three approaches to creating mocks including the one that SimpleTest employs. Coding them by hand using a base class, generating them to a file and dynamically generating them on the fly.<\\/p>\\n<p>Mock objects generated with&nbsp;<a>SimpleTest<\\/a>&nbsp;are dynamic. They are created at run time in memory, using&nbsp;<code>eval()<\\/code>, rather than written out to a file. This makes the mocks easy to create, a one liner, especially compared with hand crafting them in a parallel class hierarchy. The problem is that the behaviour is usually set up in the tests themselves. If the original objects change the mock versions that the tests rely on can get out of sync. This can happen with the parallel hierarchy approach as well, but is far more quickly detected.<\\/p>\\n<p>The solution, of course, is to add some real integration tests. You don\'t need very many and the convenience gained from the mocks more than outweighs the small amount of extra testing. You cannot trust code that was only tested with mocks.<\\/p>\\n<p>If you are still determined to build static libraries of mocks because you want to simulate very specific behaviour, you can achieve the same effect using the SimpleTest class generator. In your library file, say&nbsp;<em>mocks\\/connection.php<\\/em>&nbsp;for a database connection, create a mock and inherit to override special methods or add presets...<\\/p>\\n<\\/div>\\n<p>&nbsp;<\\/p>\",\"description_meta_tag\":\"\"}}',3,0,'2008-10-25 09:47:30'),(45,'wildpost',30,'{\"WildPost\":{\"title\":\"dasdsadsa\",\"content\":\"<p>asdasd<\\/p>\",\"description_meta_tag\":\"\"}}',1,0,'2008-10-25 09:50:07'),(46,'wildpage',83,'{\"WildPage\":{\"title\":\"Bugs\",\"content\":\"<ul>\\n<li>Post can be viewed even if draft<\\/li>\\n<li>Add new category parent select box shows parents that should not be available<\\/li>\\n<li>When trying to edit a non existent page an SQL error is shown<\\/li>\\n<li>Public search should not search in drafts<\\/li>\\n<li>Upload::create does not fill short_name<\\/li>\\n<li>Image browser CSS rf &amp; IE7 fixing<\\/li>\\n<li>Image browser can be open multiple times and get\'s fcked up<\\/li>\\n<li>I deleted a comment an another one got deleted<\\/li>\\n<li>Preview does not render home template<\\/li>\\n<li>Deleting a comment a clicking cancel deletes the comment!<\\/li>\\n<li>When a new revision gets added by AJAX the old first one remains with link witouth a rev num.<\\/li>\\n<li>Paging stuff needs to recompute itself after delete.<\\/li>\\n<\\/ul>\\n<p>Opera bugs:<\\/p>\\n<ul>\\n<li>live search cancel...<\\/li>\\n<\\/ul>\\n<p>IE7:<\\/p>\\n<ul>\\n<li>sub toolbar get f*cked up on page edit screen when a write new post\\/page is used and then canceled<\\/li>\\n<\\/ul>\",\"description_meta_tag\":\"\"}}',2,0,'2008-10-25 09:52:25'),(47,'wildpost',33,'{\"WildPost\":{\"title\":\"ff\"}}',1,1,'2008-10-26 12:12:28'),(48,'wildpost',1,'{\"WildPost\":{\"title\":\"There are not many posts out there\",\"content\":\"<div id=\\\"lipsum\\\">\\n<p>Lorem ipsum dolor sit amet, consectetuer adipiscing elit. In imperdiet odio in augue. Sed pharetra. Nullam faucibus odio. Nam rhoncus tristique augue. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Integer congue dapibus metus. Phasellus sed elit sodales orci iaculis tincidunt. Duis hendrerit, nulla eu hendrerit fermentum, diam sapien commodo enim, sed rutrum purus sapien sed pede. Phasellus vitae quam. Morbi aliquam, leo vitae consectetuer consectetuer, ligula diam volutpat eros, imperdiet egestas nulla tortor ac dui. Etiam feugiat, dui nec pharetra pharetra, erat augue vulputate sapien, ut tristique lacus felis at eros. Pellentesque eu erat. Nullam aliquet mollis dolor. Ut est orci, tempus pellentesque, semper sit amet, scelerisque in, quam. Aliquam consequat, orci nec ullamcorper condimentum, nibh ligula dictum nulla, eget pulvinar velit lacus sit amet nulla. Etiam semper faucibus mi. Aenean nunc sapien, venenatis vitae, dapibus sit amet, auctor non, lacus. Phasellus porttitor ante sit amet turpis. Vestibulum nec erat. Maecenas eros.<\\/p>\\n<p><img src=\\\"\\/wildflower\\/img\\/thumb\\/Good_Vibrations-1440x900.jpg\\/120\\/120\\/1\\\" alt=\\\"\\\" \\/><\\/p>\\n<p>Nullam quis nulla non sapien interdum varius. Cras hendrerit elementum leo. Fusce tincidunt, justo eu eleifend elementum, ante arcu blandit dolor, quis ullamcorper dui tellus sit amet quam. Vestibulum vulputate. Morbi mi odio, consectetuer ut, vulputate vitae, tristique ut, ipsum. Donec ipsum tortor, pulvinar a, pulvinar eget, commodo non, odio. Nullam dolor. Aliquam erat volutpat. Phasellus libero. Vivamus luctus lobortis libero. Ut ut elit. Sed elementum quam nec arcu. Nam id tellus non odio fermentum convallis. Nam a lacus.<\\/p>\\n<p>Phasellus ante arcu, gravida a, lobortis sit amet, volutpat non, velit. Nulla consectetuer quam gravida nulla. Integer eu purus. Morbi sit amet nunc. Mauris vehicula lacus ac lectus. Proin tortor nisl, faucibus non, molestie nec, tincidunt non, justo. Suspendisse massa lectus, hendrerit aliquam, elementum et, iaculis non, nunc. Etiam non dui. Morbi gravida massa sollicitudin ipsum. Suspendisse magna ante, facilisis ac, sagittis et, placerat et, diam. Fusce facilisis, nulla ac accumsan facilisis, mi nisi tristique quam, malesuada pulvinar neque leo ut augue. Mauris dui.<\\/p>\\n<p>Etiam nec risus at leo ullamcorper lobortis. In rhoncus massa ac velit. Nullam mollis consequat ligula. Integer iaculis, enim sed cursus hendrerit, neque dolor hendrerit erat, dignissim egestas quam quam vel quam. Etiam tellus libero, molestie non, mattis in, venenatis sed, dui. Proin non nisl ut massa ullamcorper interdum. Aliquam erat volutpat. Sed gravida. Quisque quis magna. Quisque non metus. Nullam euismod suscipit elit. Vivamus quis risus. Phasellus ut lectus. Nunc velit sem, viverra sed, convallis eu, convallis a, nisl. Maecenas bibendum orci in enim. Sed orci. Nullam adipiscing pellentesque purus. Sed risus orci, consequat nec, ornare sed, condimentum semper, mi. Fusce hendrerit, justo non volutpat pretium, neque mauris placerat est, id pretium mauris libero id eros.<\\/p>\\n<p>Sed risus mi, vestibulum ac, tincidunt at, condimentum id, tortor. Donec non mauris sed leo auctor auctor. Nullam facilisis. Quisque eu ipsum. Donec quis sem. Morbi rutrum magna in justo. Vestibulum eu orci. Praesent placerat, ipsum eget bibendum vulputate, velit dolor ultrices metus, tempus congue est lorem a eros. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia Curae; Nam consectetuer erat et urna.<\\/p>\\n<\\/div>\",\"description_meta_tag\":\"bla bla bla\"}}',1,1,'2008-10-26 12:13:39'),(49,'wildpost',31,'{\"WildPost\":{\"title\":\"CakePHP 1.2 RC3\",\"content\":\"<p>Uptated to&nbsp;CakePHP 1.2 RC3<\\/p>\\n<p>yo<br \\/>hou hou hou&nbsp;<\\/p>\",\"description_meta_tag\":\"\"}}',3,1,'2008-11-02 17:23:38');
/*!40000 ALTER TABLE `revisions` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `schema_info`
--

DROP TABLE IF EXISTS `schema_info`;
SET @saved_cs_client     = @@character_set_client;
SET character_set_client = utf8;
CREATE TABLE `schema_info` (
  `version` int(11) unsigned NOT NULL default '0'
) ENGINE=MyISAM DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;
SET character_set_client = @saved_cs_client;

--
-- Dumping data for table `schema_info`
--

LOCK TABLES `schema_info` WRITE;
/*!40000 ALTER TABLE `schema_info` DISABLE KEYS */;
INSERT INTO `schema_info` VALUES (9);
/*!40000 ALTER TABLE `schema_info` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `settings`
--

DROP TABLE IF EXISTS `settings`;
SET @saved_cs_client     = @@character_set_client;
SET character_set_client = utf8;
CREATE TABLE `settings` (
  `id` int(11) NOT NULL auto_increment,
  `name` varchar(255) collate utf8_unicode_ci NOT NULL,
  `value` text collate utf8_unicode_ci NOT NULL,
  `description` varchar(255) collate utf8_unicode_ci default NULL,
  `type` enum('text','textbox','select','checkbox','radio','password') collate utf8_unicode_ci NOT NULL,
  `label` varchar(255) collate utf8_unicode_ci default NULL,
  `order` int(11) NOT NULL,
  PRIMARY KEY  (`id`)
) ENGINE=MyISAM AUTO_INCREMENT=13 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;
SET character_set_client = @saved_cs_client;

--
-- Dumping data for table `settings`
--

LOCK TABLES `settings` WRITE;
/*!40000 ALTER TABLE `settings` DISABLE KEYS */;
INSERT INTO `settings` VALUES (1,'site_name','Wildflower 1.2','','text',NULL,1),(2,'description','A CakePHP CMS','','textbox',NULL,2),(3,'home_page_id','52','Page that will be shown when visiting the site root.','select','Home page',3),(4,'contact_email','klevo@klevo.sk','You`ll receive notifications when somebody posts a comment or uses the contact form on this email address.','text','Contact email address',4),(5,'google_analytics_code','','','textbox',NULL,10),(6,'wordpress_api_key','','','text',NULL,9),(7,'smtp_server','','','text',NULL,6),(8,'smtp_username','','','text',NULL,7),(9,'smtp_password','','','text',NULL,8),(11,'email_delivery','debug',NULL,'select',NULL,5),(12,'cache','off',NULL,'select','Page and post caching',11);
/*!40000 ALTER TABLE `settings` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `sitemaps`
--

DROP TABLE IF EXISTS `sitemaps`;
SET @saved_cs_client     = @@character_set_client;
SET character_set_client = utf8;
CREATE TABLE `sitemaps` (
  `id` int(11) NOT NULL auto_increment,
  `lft` int(11) NOT NULL,
  `rght` int(11) NOT NULL,
  `parent_id` int(11) default NULL,
  `loc` varchar(255) collate utf8_unicode_ci NOT NULL,
  `lastmod` datetime default NULL,
  `changefreq` enum('always','hourly','daily','weekly','monthly','yearly','never') collate utf8_unicode_ci default NULL,
  `priority` float default NULL,
  PRIMARY KEY  (`id`),
  KEY `lft` (`lft`,`rght`,`parent_id`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci COMMENT='Google Sitemap protocol compatible sitemap';
SET character_set_client = @saved_cs_client;

--
-- Dumping data for table `sitemaps`
--

LOCK TABLES `sitemaps` WRITE;
/*!40000 ALTER TABLE `sitemaps` DISABLE KEYS */;
/*!40000 ALTER TABLE `sitemaps` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `tags`
--

DROP TABLE IF EXISTS `tags`;
SET @saved_cs_client     = @@character_set_client;
SET character_set_client = utf8;
CREATE TABLE `tags` (
  `id` int(11) NOT NULL auto_increment,
  `name` varchar(255) collate utf8_unicode_ci NOT NULL,
  PRIMARY KEY  (`id`),
  UNIQUE KEY `name` (`name`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;
SET character_set_client = @saved_cs_client;

--
-- Dumping data for table `tags`
--

LOCK TABLES `tags` WRITE;
/*!40000 ALTER TABLE `tags` DISABLE KEYS */;
/*!40000 ALTER TABLE `tags` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `tags_uploads`
--

DROP TABLE IF EXISTS `tags_uploads`;
SET @saved_cs_client     = @@character_set_client;
SET character_set_client = utf8;
CREATE TABLE `tags_uploads` (
  `upload_id` int(11) NOT NULL,
  `tag_id` int(11) NOT NULL,
  KEY `tag_id` (`tag_id`),
  KEY `upload_id` (`upload_id`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;
SET character_set_client = @saved_cs_client;

--
-- Dumping data for table `tags_uploads`
--

LOCK TABLES `tags_uploads` WRITE;
/*!40000 ALTER TABLE `tags_uploads` DISABLE KEYS */;
/*!40000 ALTER TABLE `tags_uploads` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `uploads`
--

DROP TABLE IF EXISTS `uploads`;
SET @saved_cs_client     = @@character_set_client;
SET character_set_client = utf8;
CREATE TABLE `uploads` (
  `id` int(11) NOT NULL auto_increment,
  `name` varchar(255) collate utf8_unicode_ci NOT NULL,
  `title` varchar(255) collate utf8_unicode_ci NOT NULL,
  `mime` varchar(20) collate utf8_unicode_ci NOT NULL,
  `created` datetime NOT NULL,
  `updated` datetime NOT NULL,
  PRIMARY KEY  (`id`),
  KEY `mime` (`mime`)
) ENGINE=MyISAM AUTO_INCREMENT=9 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;
SET character_set_client = @saved_cs_client;

--
-- Dumping data for table `uploads`
--

LOCK TABLES `uploads` WRITE;
/*!40000 ALTER TABLE `uploads` DISABLE KEYS */;
INSERT INTO `uploads` VALUES (7,'Good_Vibrations-1440x900.jpg','Good_Vibrations-1440x900.jpg','image/jpeg','2008-10-10 12:49:23','2008-10-10 12:49:23'),(8,'case_Contact.pdf','case_Contact.pdf','application/pdf','2008-11-06 20:45:08','2008-11-06 20:45:08');
/*!40000 ALTER TABLE `uploads` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `users`
--

DROP TABLE IF EXISTS `users`;
SET @saved_cs_client     = @@character_set_client;
SET character_set_client = utf8;
CREATE TABLE `users` (
  `id` int(11) NOT NULL auto_increment,
  `login` varchar(255) collate utf8_unicode_ci NOT NULL,
  `password` char(40) collate utf8_unicode_ci NOT NULL,
  `email` varchar(255) collate utf8_unicode_ci NOT NULL,
  `name` varchar(255) collate utf8_unicode_ci default NULL,
  `cookie` varchar(255) collate utf8_unicode_ci default NULL,
  `created` datetime NOT NULL,
  `updated` datetime NOT NULL,
  PRIMARY KEY  (`id`),
  KEY `cookie` (`cookie`)
) ENGINE=MyISAM AUTO_INCREMENT=14 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;
SET character_set_client = @saved_cs_client;

--
-- Dumping data for table `users`
--

LOCK TABLES `users` WRITE;
/*!40000 ALTER TABLE `users` DISABLE KEYS */;
INSERT INTO `users` VALUES (1,'admin','24c05ce1409afb5dad4c5bddeb924a4bc3ea00f5','admin@localhost.sk','Mr Admin','4902c954-4788-4a46-bc75-00a7a695e31f','2008-07-11 14:24:43','2008-10-25 09:23:00');
/*!40000 ALTER TABLE `users` ENABLE KEYS */;
UNLOCK TABLES;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2008-11-06 19:46:19
